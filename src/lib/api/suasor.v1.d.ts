/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/admin/client/{clientID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete client
         * @description Deletes a client configuration
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description client deleted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-responses_EmptyResponse"];
                    };
                };
                /** @description Invalid client ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Client not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/client/{clientID}/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Test client connection
         * @description Tests the connection to a client using the provided configuration
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Connection test result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-responses_TestConnectionResponse"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/clients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all clients
         * @description Retrieves all client configurations for the user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Clients retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_ClientList"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/clients/{clientType}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get clients by type
         * @description Retrieves all clients of a specific type for the user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client type (e.g. 'plex', 'jellyfin', 'emby') */
                    clientType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Clients retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_Client-types_ClientConfig"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/clients/{clientType}/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Test client connection
         * @description Tests the connection to a client using the provided configuration
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client type */
                    clientType: string;
                };
                cookie?: never;
            };
            /** @description Updated client data */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.ClientTestRequest-client_ClientConfig"];
                };
            };
            responses: {
                /** @description Connection test result */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-responses_TestConnectionResponse"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/analyze": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Analyze content with AI
         * @description Use AI to analyze provided content
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Content analysis request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.AiContentAnalysisRequest"];
                };
            };
            responses: {
                /** @description Analysis response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-responses_AiContentAnalysisResponse"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/conversation/message": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send a message in an existing AI conversation
         * @description Continue a conversation with the AI by sending a new message
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Message request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.ConversationMessageRequest"];
                };
            };
            responses: {
                /** @description AI response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-responses_ConversationMessageResponse"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Conversation not owned by user */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Conversation not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/conversation/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start a new AI conversation for recommendations
         * @description Initialize a new conversational session with the AI for personalized recommendations
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Conversation initialization request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.StartConversationRequest"];
                };
            };
            responses: {
                /** @description Conversation started */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-responses_ConversationResponse"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/recommendations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get AI-powered content recommendations
         * @description Get content recommendations from an AI service
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Recommendation request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.AiRecommendationRequest"];
                };
            };
            responses: {
                /** @description Recommendation response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-responses_AiRecommendationResponse"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/client/{clientID}/media/movies/actor/{actor}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get movies by actor
         * @description Retrieves movies featuring a specific actor
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of movies to return (default 20) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Actor name */
                    actor: string;
                    /** @description Client ID */
                    clientID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Movie not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/client/{clientID}/media/movies/director/{director}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get movies by director
         * @description Retrieves movies from all connected clients directed by the specified director
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Director name */
                    director: string;
                    /** @description Client ID */
                    clientID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/client/{clientID}/media/movies/genre/{genre}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get movies by genre
         * @description Retrieves movies from all connected clients that match the specified genre
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Genre name */
                    genre: string;
                    /** @description Client ID */
                    clientID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/client/{clientID}/media/movies/latest/{count}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get latest added movies
         * @description Retrieves the most recently added movies from all connected clients
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Number of movies to retrieve */
                    count: number;
                    /** @description Client ID */
                    clientID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Invalid count format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/client/{clientID}/media/movies/popular/{count}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get popular movies
         * @description Retrieves the most popular movies from all connected clients
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Number of movies to retrieve */
                    count: number;
                    /** @description Client ID */
                    clientID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Invalid count format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/client/{clientID}/media/movies/rating": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get movies by rating range
         * @description Retrieves movies from all connected clients with ratings in the specified range
         */
        get: {
            parameters: {
                query: {
                    /** @description Minimum rating (e.g. 7.5) */
                    min: number;
                    /** @description Maximum rating (e.g. 10.0) */
                    max: number;
                };
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Invalid rating format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/client/{clientID}/media/movies/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for movies
         * @description Searches for movies across all connected clients matching the query
         */
        get: {
            parameters: {
                query: {
                    /** @description Search query */
                    q: string;
                };
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Missing search query */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/client/{clientID}/media/movies/top-rated/{count}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get top rated movies
         * @description Retrieves the highest rated movies from all connected clients
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Number of movies to retrieve */
                    count: number;
                    /** @description Client ID */
                    clientID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Invalid count format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/client/{clientID}/media/movies/year/{year}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get movies by release year
         * @description Retrieves movies from all connected clients that were released in the specified year
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Release year */
                    year: number;
                    /** @description Client ID */
                    clientID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Invalid year */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/client/{clientID}/media/movies/{movieID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get movie by ID
         * @description Retrieves a specific movie from the client by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                    /** @description Movie ID */
                    movieID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Invalid client ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/client/{clientID}/media/movies/{source}/{externalID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get movie by external ID
         * @description Retrieves a movie from all connected clients by external ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Source */
                    source: string;
                    /** @description Client ID */
                    clientID: number;
                    /** @description External ID */
                    externalID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Invalid client ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Log in a user
         * @description Authenticates a user with email and password
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description User login data */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.LoginRequest"];
                };
            };
            responses: {
                /** @description Successfully authenticated user */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-responses_AuthDataResponse"];
                    };
                };
                /** @description Invalid request format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Invalid credentials or inactive account */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Log out a user
         * @description Invalidates the refresh token, effectively logging the user out
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Logout data */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.LogoutRequest"];
                };
            };
            responses: {
                /** @description Successfully logged out */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-any"];
                    };
                };
                /** @description Invalid request format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Invalid refresh token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh access token
         * @description Get a new access token using a refresh token
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Refresh token data */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.RefreshTokenRequest"];
                };
            };
            responses: {
                /** @description Successfully refreshed token */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-responses_AuthDataResponse"];
                    };
                };
                /** @description Invalid request format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Invalid or expired refresh token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register a new user
         * @description Registers a new user with email, username, and password
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description User registration data */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.RegisterRequest"];
                };
            };
            responses: {
                /** @description Successfully registered user */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-responses_AuthDataResponse"];
                    };
                };
                /** @description Invalid request format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Email or username already in use */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Validate user session
         * @description Validates the user's session token and returns current user profile
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Valid session with user details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-responses_UserResponse"];
                    };
                };
                /** @description Invalid or expired session token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/media/multi": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get media items from multiple clients
         * @description Retrieves media items associated with any of the specified clients
         */
        get: {
            parameters: {
                query: {
                    /** @description Comma-separated list of client IDs */
                    clientIDs: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Media items retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_MediaData"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/media/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for media items across multiple clients
         * @description Searches for media items across multiple clients based on query parameters
         */
        get: {
            parameters: {
                query: {
                    /** @description Search query */
                    q: string;
                    /** @description Comma-separated list of client IDs */
                    clientIDs: string;
                    /** @description Media type filter */
                    type?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Media items retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-map_string_array_models_MediaItem-types_MediaData"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/media/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sync a media item between clients
         * @description Creates or updates a mapping between a media item and a target client
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Sync request with source and target client info */
            requestBody: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Item synced successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-types_MediaData"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Media item not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/automation/calendar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get calendar from automation client
         * @description Retrieves calendar events from the automation client
         */
        get: {
            parameters: {
                query?: {
                    /** @description Start date (YYYY-MM-DD) */
                    start?: string;
                    /** @description End date (YYYY-MM-DD) */
                    end?: string;
                };
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Calendar events retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.EmptyAPIResponse"];
                    };
                };
                /** @description Invalid client ID or dates */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/automation/command": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Execute command on automation client
         * @description Executes a command on the automation client
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                };
                cookie?: never;
            };
            /** @description Command details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.AutomationExecuteCommandRequest"];
                };
            };
            responses: {
                /** @description Command execution response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.AutomationExecuteCommandResponse"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/automation/item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add media to automation client
         * @description Adds a new media item to the automation client
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                };
                cookie?: never;
            };
            /** @description Media details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.AddMediaRequest"];
                };
            };
            responses: {
                /** @description Media added */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.EmptyAPIResponse"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/automation/item/{itemID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get media by ID from automation client
         * @description Retrieves a specific media item from the automation client
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                    /** @description Media Item ID */
                    itemID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Media retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.EmptyAPIResponse"];
                    };
                };
                /** @description Invalid client or media ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        /**
         * Update media in automation client
         * @description Updates an existing media item in the automation client
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                    /** @description Media Item ID */
                    itemID: string;
                };
                cookie?: never;
            };
            /** @description Media details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.UpdateMediaRequest"];
                };
            };
            responses: {
                /** @description Media updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.EmptyAPIResponse"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete media from automation client
         * @description Deletes a media item from the automation client
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                    /** @description Item ID */
                    itemID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Media deleted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.EmptyAPIResponse"];
                    };
                };
                /** @description Invalid client or media ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/automation/library": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get library items from automation client
         * @description Retrieves all library items from the automation client
         */
        get: {
            parameters: {
                query?: {
                    /** @description Limit */
                    limit?: number;
                    /** @description Offset */
                    offset?: number;
                    /** @description Sort by */
                    sortBy?: string;
                    /** @description Sort order */
                    sortOrder?: string;
                };
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Library items retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.EmptyAPIResponse"];
                    };
                };
                /** @description Invalid client ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/automation/profiles/metadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get metadata profiles from automation client
         * @description Retrieves all metadata profiles from the automation client
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Metadata profiles retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.EmptyAPIResponse"];
                    };
                };
                /** @description Invalid client ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/automation/profiles/quality": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get quality profiles from automation client
         * @description Retrieves all quality profiles from the automation client
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Quality profiles retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.EmptyAPIResponse"];
                    };
                };
                /** @description Invalid client ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/automation/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search media in automation client
         * @description Searches for media items in the automation client
         */
        get: {
            parameters: {
                query: {
                    /** @description Search query */
                    q: string;
                };
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Search results */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.EmptyAPIResponse"];
                    };
                };
                /** @description Invalid client ID or query */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/automation/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get automation client system status
         * @description Retrieves system status information from the automation client
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description System status information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.SystemStatusResponse"];
                    };
                };
                /** @description Invalid client ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/automation/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get tags from automation client
         * @description Retrieves all tags from the automation client
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Tags retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.EmptyAPIResponse"];
                    };
                };
                /** @description Invalid client ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create tag in automation client
         * @description Creates a new tag in the automation client
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                };
                cookie?: never;
            };
            /** @description Tag details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.CreateTagRequest"];
                };
            };
            responses: {
                /** @description Tag created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.EmptyAPIResponse"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get media items by client
         * @description Retrieves all media items for a specific client
         */
        get: {
            parameters: {
                query?: {
                    /** @description Media type filter */
                    type?: string;
                };
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Media items retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_MediaData"];
                    };
                };
                /** @description Invalid client ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/album/item/{clientItemID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get album by ID
         * @description Retrieves a specific music album from the client by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                    /** @description Album ID */
                    albumID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Album retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-types_Album"];
                    };
                };
                /** @description Invalid client ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/album/{clientItemID}/tracks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get artist by ID
         * @description Retrieves a specific music artist from the client by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                    /** @description Artist ID */
                    artistID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Artist retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-types_Artist"];
                    };
                };
                /** @description Invalid client ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/item/{itemID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a media item from a client
         * @description Deletes a media item from a client
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                    /** @description Item ID */
                    itemID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Item deleted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.SuccessResponse"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/music/albums/favorites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get favorite albums
         * @description Retrieves the user's favorite albums from a client
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of albums to return (default 10) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Favorite albums retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Album"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/music/albums/genre/{genre}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get albums by genre
         * @description Retrieves albums from all connected clients that match the specified genre
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Genre name */
                    genre: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Albums retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Album"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/music/albums/latest/{count}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get latest albums by added date
         * @description Retrieves the most recently added albums
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Number of albums to retrieve */
                    count: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Albums retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Album"];
                    };
                };
                /** @description Invalid count */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/music/albums/popular/{count}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get popular albums
         * @description Retrieves most popular albums
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Number of albums to retrieve */
                    count: number;
                    /** @description Client ID */
                    clientID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Albums retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Album"];
                    };
                };
                /** @description Invalid count */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/music/albums/top": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get top albums from a client
         * @description Retrieves the most popular albums from a client
         */
        get: {
            parameters: {
                query?: {
                    /** @description Number of albums to retrieve (default 10) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Client Type */
                    clientType: string;
                    /** @description Client ID */
                    clientID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Albums retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Album"];
                    };
                };
                /** @description Invalid client ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/music/albums/year/{year}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get albums by release year
         * @description Retrieves albums from all connected clients that were released in the specified year
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Release year */
                    year: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Albums retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Album"];
                    };
                };
                /** @description Invalid year */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/music/artists/favorites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get favorite artists from a client
         * @description Retrieves the user's favorite artists from a client
         */
        get: {
            parameters: {
                query?: {
                    /** @description Number of artists to retrieve (default 10) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Client Type */
                    clientType: string;
                    /** @description Client ID */
                    clientID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Artists retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Artist"];
                    };
                };
                /** @description Invalid client ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/music/artists/genre/{genre}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get artists by genre
         * @description Retrieves artists from all connected clients that match the specified genre
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of artists to return (default 10) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Genre name */
                    genre: string;
                    /** @description Client ID */
                    clientID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Artists retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Artist"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/music/artists/popular/{count}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get popular artists
         * @description Retrieves most popular artists
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                    /** @description Number of artists to retrieve */
                    count: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Artists retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Artist"];
                    };
                };
                /** @description Invalid count */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/music/artists/top": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get top artists from a client
         * @description Retrieves the most popular artists from a client
         */
        get: {
            parameters: {
                query?: {
                    /** @description Number of artists to retrieve (default 10) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Client Type */
                    clientType: string;
                    /** @description Client ID */
                    clientID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Artists retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Artist"];
                    };
                };
                /** @description Invalid client ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/music/artists/{artistID}/albums": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get albums by artist
         * @description Retrieves all albums for a specific artist
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                    /** @description Artist ID */
                    artistID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Albums retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Album"];
                    };
                };
                /** @description Invalid client ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/music/artists/{artistID}/similar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get similar artists
         * @description Retrieves artists similar to a specific artist from a client
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of artists to return (default 10) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                    /** @description Artist ID */
                    artistID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Similar artists retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Artist"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/music/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search music (artists, albums, tracks)
         * @description Search for music across all connected clients
         */
        get: {
            parameters: {
                query: {
                    /** @description Search query */
                    q: string;
                };
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Music search results retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-responses_MediaItemResponse"];
                    };
                };
                /** @description Invalid query */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/music/tracks/favorites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get favorite tracks
         * @description Retrieves the user's favorite tracks from a client
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of tracks to return (default 10) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Favorite tracks retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Track"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/music/tracks/genre/{genre}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get tracks by genre
         * @description Retrieves tracks from all connected clients that match the specified genre
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Genre name */
                    genre: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Tracks retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Track"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/music/tracks/recently-added": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recently added tracks from a client
         * @description Retrieves the most recently added tracks from a client
         */
        get: {
            parameters: {
                query?: {
                    /** @description Number of tracks to retrieve (default 10) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Client Type */
                    clientType: string;
                    /** @description Client ID */
                    clientID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Tracks retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Track"];
                    };
                };
                /** @description Invalid client ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/music/tracks/recently-played": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recently played tracks
         * @description Retrieves the user's recently played tracks from a client
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of tracks to return (default 10) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Recently played tracks retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Track"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/music/tracks/top": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get top tracks from a client
         * @description Retrieves the most popular tracks from a client
         */
        get: {
            parameters: {
                query?: {
                    /** @description Number of tracks to retrieve (default 10) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Client Type */
                    clientType: string;
                    /** @description Client ID */
                    clientID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Tracks retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Track"];
                    };
                };
                /** @description Invalid client ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/music/tracks/{trackID}/similar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get similar tracks
         * @description Retrieves tracks similar to a specific track from a client
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of tracks to return (default 10) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                    /** @description Track ID */
                    trackID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Similar tracks retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Track"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/series/actor/{actor}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get series by actor
         * @description Retrieves TV series featuring a specific actor
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Actor name */
                    actor: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Series retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Series"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/series/creator/{creator}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get series by creator
         * @description Retrieves TV series by a specific creator/director
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Creator name */
                    creator: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Series retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Series"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/series/genre/{genre}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get series by genre
         * @description Retrieves TV series from all connected clients that match the specified genre
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Genre name */
                    genre: string;
                    /** @description Client ID */
                    clientID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Series retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_responses_MediaItemResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/series/latest/{count}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get latest series by added date
         * @description Retrieves the most recently added TV series
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Number of series to retrieve */
                    count: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Series retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Series"];
                    };
                };
                /** @description Invalid count */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/series/popular/{count}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get popular series
         * @description Retrieves most popular TV series
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Number of series to retrieve */
                    count: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Series retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Series"];
                    };
                };
                /** @description Invalid count */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/series/rating": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get series by rating range
         * @description Retrieves TV series with ratings within the specified range
         */
        get: {
            parameters: {
                query: {
                    /** @description Minimum rating */
                    min: number;
                    /** @description Maximum rating */
                    max: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Series retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Series"];
                    };
                };
                /** @description Invalid rating parameters */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/series/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search series
         * @description Search for TV series across all connected clients
         */
        get: {
            parameters: {
                query: {
                    /** @description Search query */
                    q: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Series retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Series"];
                    };
                };
                /** @description Invalid query */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/series/top-rated/{count}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get top rated series
         * @description Retrieves the highest rated TV series
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Number of series to retrieve */
                    count: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Series retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Series"];
                    };
                };
                /** @description Invalid count */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/series/year/{year}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get series by release year
         * @description Retrieves TV series from all connected clients that were released in the specified year
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Release year */
                    year: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Series retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Series"];
                    };
                };
                /** @description Invalid year */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/series/{seriesID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get series by ID
         * @description Retrieves a specific TV series from the client by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                    /** @description Series ID */
                    seriesID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Series"];
                    };
                };
                /** @description Invalid client ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/series/{seriesID}/seasons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get seasons for a series
         * @description Retrieves all seasons for a specific TV series
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                    /** @description Series ID */
                    seriesID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Series retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-types_Series"];
                    };
                };
                /** @description Invalid client ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/track/item/{clientItemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get track by ID from client
         * @description Retrieves a specific music track from the client by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                    /** @description Track ID */
                    trackID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Track retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-types_Track"];
                    };
                };
                /** @description Invalid client ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/{itemID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update an existing client media item
         * @description Updates a client media item in the database by ID
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Media item ID */
                    itemID: string;
                };
                cookie?: never;
            };
            /** @description Media item data to update */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["models.MediaItem-any"];
                };
            };
            responses: {
                /** @description Media item updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-types_MediaData"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Media item not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/{mediaType}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new media item associated with a client
         * @description Creates a new media item in the database with client association
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Media item data with type, client info, and type-specific data */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["models.MediaItem-any"];
                };
            };
            responses: {
                /** @description Media item created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-types_MediaData"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/{mediaType}/{clientItemID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get media item by client-specific ID
         * @description Retrieves a media item using its client-specific ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                    /** @description Client-specific item ID */
                    clientItemID: string;
                    /** @description Media type */
                    mediaType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Media item retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-types_MediaData"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Media item not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/media/{mediaType}/{itemID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get media item by client-specific ID
         * @description Retrieves a media item using its client-specific ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                    /** @description Media type */
                    mediaType: string;
                    /** @description Client-specific item ID */
                    itemID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Media item retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-types_MediaData"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Media item not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/movie/actor/{actor}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get movies by actor
         * @description Retrieves movies from all connected clients featuring the specified actor
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Actor name */
                    actor: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/movie/director/{director}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get movies by director
         * @description Retrieves movies from all connected clients directed by the specified director
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Director name */
                    director: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/movie/external/{source}/{externalID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get movie by external ID
         * @description Retrieves a movie from all connected clients by external ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Source */
                    source: number;
                    /** @description External ID */
                    externalID: string;
                    /** @description Client ID */
                    clientID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Invalid client ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/movie/genre/{genre}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get movies by genre
         * @description Retrieves movies from all connected clients that match the specified genre
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Genre name */
                    genre: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/movie/item/{clientItemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get movie by ID
         * @description Retrieves a specific movie from the client by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                    /** @description Movie ID */
                    clientItemID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Invalid client ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/movie/latest/{count}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get latest added movies
         * @description Retrieves the most recently added movies from all connected clients
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Number of movies to retrieve */
                    count: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Invalid count format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/movie/popular/{count}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get popular movies
         * @description Retrieves the most popular movies from all connected clients
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Number of movies to retrieve */
                    count: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Invalid count format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/movie/rating": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get movies by rating range
         * @description Retrieves movies from all connected clients with ratings in the specified range
         */
        get: {
            parameters: {
                query: {
                    /** @description Minimum rating (e.g. 7.5) */
                    min: number;
                    /** @description Maximum rating (e.g. 10.0) */
                    max: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Invalid rating format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/movie/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for movies
         * @description Searches for movies across all connected clients matching the query
         */
        get: {
            parameters: {
                query: {
                    /** @description Search query */
                    q: string;
                };
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Missing search query */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/movie/top-rated/{count}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get top rated movies
         * @description Retrieves the highest rated movies from all connected clients
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Number of movies to retrieve */
                    count: number;
                    /** @description Client ID */
                    clientID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Invalid count format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/movie/year/{year}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get movies by release year
         * @description Retrieves movies from all connected clients that were released in the specified year
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Release year */
                    year: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Invalid year */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/user-data/{mediaType}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user media item data for a client
         * @description Retrieves user media item data for synchronization with a client
         */
        get: {
            parameters: {
                query?: {
                    /** @description User ID (optional, uses authenticated user ID if not provided) */
                    userID?: number;
                    /** @description Since date (default 24 hours ago) */
                    since?: string;
                };
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                    /** @description Media type like movie, series, track, etc. */
                    mediaType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved client media item data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_UserMediaItemData-types_MediaData"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/user-data/{mediaType}/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Synchronize user media item data from a client
         * @description Synchronizes user media item data from an external client
         */
        post: {
            parameters: {
                query?: {
                    /** @description User ID (optional, uses authenticated user ID if not provided) */
                    userID?: number;
                };
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                };
                cookie?: never;
            };
            /** @description Media item data to synchronize */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.UserMediaItemDataSyncRequest"];
                };
            };
            responses: {
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/user-data/{mediaType}/{clientItemID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user media item data by client ID
         * @description Retrieves user media item data for a specific user and client item
         */
        get: {
            parameters: {
                query?: {
                    /** @description User ID (optional, uses authenticated user ID if not provided) */
                    userID?: number;
                };
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                    /** @description Client Item ID */
                    clientItemID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved user media item data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_UserMediaItemData-types_MediaData"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/user-data/{mediaType}/{clientItemID}/play": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Record a client play event
         * @description Records a play event from a client
         */
        post: {
            parameters: {
                query?: {
                    /** @description User ID (optional, uses authenticated user ID if not provided) */
                    userID?: number;
                };
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                    /** @description Client Item ID */
                    clientItemID: string;
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["requests.UserMediaItemDataRequest"];
            responses: {
                /** @description Play event recorded successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_UserMediaItemData-types_MediaData"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/user-data/{mediaType}/{clientItemID}/state": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get playback state for a client item
         * @description Retrieves the current playback state for a client item
         */
        get: {
            parameters: {
                query?: {
                    /** @description User ID (optional, uses authenticated user ID if not provided) */
                    userID?: number;
                };
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                    /** @description Client Item ID */
                    clientItemID: string;
                    /** @description Media type like movie, series, track, etc. */
                    mediaType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved playback state */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_UserMediaItemData-types_MediaData"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        /**
         * Update playback state for a client item
         * @description Updates the playback state for a client item
         */
        put: {
            parameters: {
                query?: {
                    /** @description User ID (optional, uses authenticated user ID if not provided) */
                    userID?: number;
                };
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                    /** @description Client Item ID */
                    clientItemID: string;
                };
                cookie?: never;
            };
            /** @description Playback state information */
            requestBody: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Playback state updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_UserMediaItemData-types_MediaData"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/{listType}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all playlists
         * @description Retrieves all playlists from the client
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of playlists to return */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                    /** @description List type (e.g. 'playlist', 'collection') */
                    listType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Lists retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_ListData"];
                    };
                };
                /** @description Invalid client ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new playlist
         * @description Creates a new playlist on the specified client
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                    /** @description List type (e.g. 'playlist', 'collection') */
                    listType: string;
                };
                cookie?: never;
            };
            /** @description List creation data */
            requestBody: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description List created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-types_ListData"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/{listType}/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search playlists
         * @description Searches for playlists matching the given query
         */
        get: {
            parameters: {
                query: {
                    /** @description Search query */
                    q: string;
                };
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                    /** @description List type (e.g. 'playlist', 'collection') */
                    listType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Lists found */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_ListData"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/{listType}/{listID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get list by ID
         * @description Retrieves a specific list from the client by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                    /** @description List ID */
                    listID: string;
                    /** @description List type (e.g. 'playlist', 'collection') */
                    listType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-types_ListData"];
                    };
                };
                /** @description Invalid client ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        /**
         * Update a playlist
         * @description Updates an existing playlist on the specified client
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                    /** @description List type (e.g. 'playlist', 'collection') */
                    listType: string;
                    /** @description List ID */
                    listID: string;
                };
                cookie?: never;
            };
            /** @description List update data */
            requestBody: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description List updated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-types_ListData"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete a playlist
         * @description Deletes a playlist from the specified client
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                    /** @description List type (e.g. 'playlist', 'collection') */
                    listType: string;
                    /** @description List ID */
                    listID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List deleted */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.SuccessResponse"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/{listType}/{listID}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add an item to a playlist
         * @description Adds a media item to an existing playlist
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                    /** @description List type (e.g. 'playlist', 'collection') */
                    listType: string;
                    /** @description List ID */
                    listID: string;
                };
                cookie?: never;
            };
            /** @description Item to add */
            requestBody: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Item added to playlist */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.SuccessResponse"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientID}/{listType}/{playlistID}/items/{itemID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove an item from a playlist
         * @description Removes a media item from an existing playlist
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                    /** @description List ID */
                    playlistID: string;
                    /** @description Item ID to remove */
                    itemID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Item removed from playlist */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.SuccessResponse"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/{clientType}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new client
         * @description Creates a new client configuration
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Client type */
                    clientType: string;
                };
                cookie?: never;
            };
            /** @description client data */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.ClientRequest-types_ClientConfig"];
                };
            };
            responses: {
                /** @description client created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_Client-types_ClientConfig"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current configuration
         * @description Returns the current system configuration
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Configuration retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-types_Configuration"];
                    };
                };
                /** @description Unauthorized access */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Forbidden - admin access required */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        /**
         * Update application configuration
         * @description Updates the system-wide application configuration (admin only)
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["types.Configuration"];
            responses: {
                /** @description Configuration updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.SuccessResponse"];
                    };
                };
                /** @description Invalid request format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized access */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Forbidden - admin access required */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/config/file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get file-based configuration
         * @description Returns the file-based system configuration (admin only)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description File configuration retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-types_Configuration"];
                    };
                };
                /** @description Unauthorized access */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Forbidden - admin access required */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        /**
         * Save configuration to file
         * @description Saves the configuration to file only (admin only)
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["types.Configuration"];
            responses: {
                /** @description Configuration saved to file successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.SuccessResponse"];
                    };
                };
                /** @description Invalid request format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized access */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Forbidden - admin access required */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/config/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset configuration to defaults
         * @description Resets the system configuration to default values (admin only)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Configuration reset successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.SuccessResponse"];
                    };
                };
                /** @description Unauthorized access */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Forbidden - admin access required */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * checks app and database health
         * @description returns JSON object with health statuses.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-responses_HealthResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all active job runs
         * @description Returns a list of all currently running jobs
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_JobRun"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/media-sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get job runs for current user
         * @description Returns a list of job runs for the current user
         */
        get: {
            parameters: {
                query?: {
                    /** @description Limit number of results (default 50) */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaSyncJob"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Setup media sync job
         * @description Creates or updates a media sync job for the current user
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Media sync job setup */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.SetupMediaSyncJobRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-any"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/media-sync/run": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Run media sync job manually
         * @description Runs a media sync job manually for the current user
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Media sync job run */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.RunMediaSyncJobRequest"];
                };
            };
            responses: {
                /** @description Accepted */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-any"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/recommendations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recommendations for current user
         * @description Returns a list of recommendations for the current user
         */
        get: {
            parameters: {
                query?: {
                    /** @description Only return active recommendations (default true) */
                    active?: boolean;
                    /** @description Limit number of results (default 50) */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_Recommendation"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/recommendations/{id}/dismiss": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Dismiss recommendation
         * @description Marks a recommendation as dismissed
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Recommendation ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-any"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/recommendations/{id}/viewed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update recommendation viewed status
         * @description Updates whether a recommendation has been viewed
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Recommendation ID */
                    id: number;
                };
                cookie?: never;
            };
            /** @description Viewed status update */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.UpdateRecommendationViewedRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-any"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/runs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recent job runs
         * @description Returns a list of recent job runs
         */
        get: {
            parameters: {
                query?: {
                    /** @description Limit number of results (default 50) */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_JobRun"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/runs/{id}/progress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get job run progress
         * @description Returns progress information for a specific job run
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Job Run ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_JobRun"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/schedules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all job schedules
         * @description Returns a list of all job schedules
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_JobSchedule"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        /**
         * Update job schedule
         * @description Updates an existing job schedule
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Job schedule update */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.UpdateJobScheduleRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_JobSchedule"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        /**
         * Create a new job schedule
         * @description Creates a new job schedule
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Job schedule to create */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["models.JobSchedule"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_JobSchedule"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/schedules/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get job schedule by name
         * @description Returns a specific job schedule by its name
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Job name */
                    name: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_JobSchedule"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/{name}/run": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Run job manually
         * @description Triggers a job to run immediately
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Job name */
                    name: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Accepted */
                202: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-any"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/credits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new credit
         * @description Creates a new credit associating a person with a media item
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Credit information */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.CreateCreditRequest"];
                };
            };
            responses: {
                /** @description Credit created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_Credit"];
                    };
                };
                /** @description Invalid request format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/credits/person/{personID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all credits for a person
         * @description Retrieves all credits associated with a specific person
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Person ID */
                    personID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Credits retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_Credit"][];
                    };
                };
                /** @description Invalid person ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/credits/{creditID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update an existing credit
         * @description Updates a credit record with the provided information
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Credit ID */
                    creditID: number;
                };
                cookie?: never;
            };
            /** @description Updated credit information */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.UpdateCreditRequest"];
                };
            };
            responses: {
                /** @description Credit updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.Credit"];
                    };
                };
                /** @description Invalid credit ID or request format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Credit not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete a credit
         * @description Deletes a credit record by ID
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Credit ID */
                    creditID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Credit deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.SuccessResponse"];
                    };
                };
                /** @description Invalid credit ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Credit not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/credits/{itemID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all credits for a media item
         * @description Retrieves all credits (cast and crew) associated with a specific media item
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Media Item ID */
                    itemID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Credits retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_Credit"][];
                    };
                };
                /** @description Invalid media item ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create multiple credits for a media item
         * @description Creates multiple credits for a specific media item in a single operation
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Media Item ID */
                    itemID: number;
                };
                cookie?: never;
            };
            /** @description Multiple credits information */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.CreateCreditRequest"];
                };
            };
            responses: {
                /** @description Credits created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_Credit"][];
                    };
                };
                /** @description Invalid media item ID or request format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/credits/{itemID}/cast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get cast for a media item
         * @description Retrieves all cast credits associated with a specific media item
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Media Item ID */
                    itemID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Cast credits retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_Credit"][];
                    };
                };
                /** @description Invalid media item ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/credits/{itemID}/crew": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get crew for a media item
         * @description Retrieves all crew credits associated with a specific media item, optionally filtered by department
         */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by department (e.g., 'Directing', 'Writing') */
                    department?: string;
                };
                header?: never;
                path: {
                    /** @description Media Item ID */
                    itemID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Crew credits retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_Credit"][];
                    };
                };
                /** @description Invalid media item ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/credits/{itemID}/directors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get directors for a media item
         * @description Retrieves all director credits associated with a specific media item
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Media Item ID */
                    itemID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Director credits retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_Credit"][];
                    };
                };
                /** @description Invalid media item ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/credits/{itemID}/{type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get credits by type for a media item
         * @description Retrieves credits for a media item filtered by type (cast, crew, directors)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Media Item ID */
                    itemID: number;
                    /** @description Credit type (cast, crew, directors) */
                    type: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Credits retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_Credit"][];
                    };
                };
                /** @description Invalid media item ID or credit type */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/movie/actor/{actor}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get movies by actor
         * @description Retrieves movies featuring a specific actor
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of movies to return (default 20) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Actor name */
                    actor: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/movie/client/{clientID}/item/{clientItemID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get movies by client-specific ID
         * @description Retrieves movies associated with a specific client
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of movies to return (default 20) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                    /** @description Client Item ID */
                    clientItemID: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Movie not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/movie/director/{director}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get movies by director
         * @description Retrieves movies directed by a specific director
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of movies to return (default 20) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Director name */
                    director: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/movie/genre/{genre}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get movies by genre
         * @description Retrieves movies that match a specific genre
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of movies to return (default 20) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Genre name */
                    genre: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/movie/latest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get latest added movies
         * @description Retrieves the most recently added movies
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of movies to return (default 20) */
                    limit?: number;
                    /** @description Number of days to look back (default 30) */
                    days?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/movie/popular": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get popular movies
         * @description Retrieves the most popular movies
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of movies to return (default 20) */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/movie/rating/{rating}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get movies by rating
         * @description Retrieves movies that match a specific rating
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of movies to return (default 20) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Rating */
                    rating: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/movie/recently-added": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recently added movies
         * @description Retrieves the most recently added movies
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of movies to return (default 20) */
                    limit?: number;
                    /** @description Number of days to look back (default 30) */
                    days?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/movie/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search movies
         * @description Searches for movies that match the query
         */
        get: {
            parameters: {
                query: {
                    /** @description Search query */
                    q: string;
                    /** @description Maximum number of movies to return (default 20) */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/movie/top-rated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get top rated movies
         * @description Retrieves the highest rated movies
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of movies to return (default 20) */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/movie/year/{year}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get movies by year
         * @description Retrieves movies released in a specific year
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of movies to return (default 20) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Release year */
                    year: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/movie/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get movie by ID
         * @description Retrieves a specific movie by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Movie ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movie retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Movie not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/movie/{itemID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update user data for a movie
         * @description Updates user-specific data for a movie (favorite, watched status, rating, etc.)
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Movie ID */
                    itemID: number;
                };
                cookie?: never;
            };
            /** @description Updated user data */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.UserMediaItemDataUpdateRequest"];
                };
            };
            responses: {
                /** @description Movie updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Movie not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/media/movies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all movies
         * @description Retrieves all movies in the database
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of movies to return (default 20) */
                    limit?: number;
                    /** @description Offset for pagination (default 0) */
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/movies/user/favorites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user favorite movies
         * @description Retrieves movies that a user has marked as favorites
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of movies to return (default 20) */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/movies/user/recommended": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recommended movies for user
         * @description Retrieves movies recommended for the user based on their preferences and watch history
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of movies to return (default 20) */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/movies/user/watched": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user watched movies
         * @description Retrieves movies that a user has watched
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of movies to return (default 20) */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/movies/user/watchlist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get movies in user watchlist
         * @description Retrieves movies that a user has added to their watchlist
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of movies to return (default 20) */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Movies retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/music/albums/latest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get latest albums by added date
         * @description Retrieves the latest albums added to the library
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of albums to return (default 10) */
                    limit?: number;
                    /** @description Number of days to look back (default 30) */
                    days?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Albums retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Album"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/music/albums/popular": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get popular albums
         * @description Retrieves the most popular albums based on play count, ratings, etc.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of albums to return (default 10) */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Albums retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Album"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/music/albums/top": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get top albums
         * @description Retrieves the top albums based on play count, ratings, etc.
         */
        get: {
            parameters: {
                query: {
                    /** @description User ID */
                    userID: number;
                    /** @description Maximum number of albums to return (default 10) */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Albums retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Album"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/music/albums/year/{year}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get albums by release year
         * @description Retrieves albums released in a specific year
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of albums to return (default 10) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Release year */
                    year: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Albums retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Album"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/music/albums/{albumID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get album by ID
         * @description Retrieves an album by its ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Album ID */
                    albumID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Album retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-types_Album"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Album not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/music/albums/{id}/tracks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get tracks by album ID
         * @description Retrieves all tracks for a specific album
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Album ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Tracks retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Track"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Album not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/music/artist/{artistID}/albums": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get albums by artist ID
         * @description Retrieves all albums for a specific artist
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Artist ID */
                    artistID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Albums retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Album"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Artist not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/music/artist/{id}/albums": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get albums for an artist
         * @description Retrieves all albums for a specific artist
         */
        get: {
            parameters: {
                query: {
                    /** @description User ID */
                    userID: number;
                };
                header?: never;
                path: {
                    /** @description Artist ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Albums retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Album"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Artist not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/music/artist/{id}/similar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get similar artists
         * @description Retrieves the similar artists to a specific artist
         */
        get: {
            parameters: {
                query: {
                    /** @description User ID */
                    userID: number;
                };
                header?: never;
                path: {
                    /** @description Artist ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Similar artists retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Artist"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Artist not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/music/artists/popular": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get popular artists
         * @description Retrieves the most popular artists based on play count, ratings, etc.
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of artists to return (default 10) */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Artists retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Artist"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/music/artists/{artistID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get artist by ID
         * @description Retrieves an artist by their ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Artist ID */
                    artistID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Artist retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-types_Artist"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Artist not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/music/genre/{genre}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get genre recommendations
         * @description Get music recommendations based on a genre
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Genre name */
                    genre: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Music items retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Track"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/music/genres/{genre}/albums": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get albums by genre
         * @description Retrieves albums by genre
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of albums to return (default 10) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Genre name */
                    genre: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Albums retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Album"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/music/genres/{genre}/artists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get artists by genre
         * @description Retrieves artists by genre
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of artists to return (default 10) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Genre name */
                    genre: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Artists retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Artist"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/music/genres/{genre}/tracks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get tracks by genre
         * @description Retrieves tracks by genre
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of tracks to return (default 10) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Genre name */
                    genre: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Tracks retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Track"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/music/recently-added": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recently added music
         * @description Retrieves recently added music
         */
        get: {
            parameters: {
                query: {
                    /** @description User ID */
                    userID: number;
                    /** @description Maximum number of music items to return (default 10) */
                    limit?: number;
                    /** @description Number of days to look back (default 30) */
                    days?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Music items retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Track"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/music/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search music
         * @description Search for music items (tracks, albums, artists) by query
         */
        get: {
            parameters: {
                query: {
                    /** @description Search query */
                    q: string;
                    /** @description Media type to search for (track, album, artist) */
                    type?: string;
                    /** @description Maximum number of items to return (default 10) */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Search results retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItemList"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/music/track/{itemID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get track by ID
         * @description Retrieves a track by its ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Track ID */
                    itemID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Track retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-types_Track"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Track not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/music/track/{trackID}/similar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get similar tracks
         * @description Retrieves tracks similar to a specific track
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of tracks to return (default 10) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Track ID */
                    trackID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Similar tracks retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Track"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Track not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/music/tracks/recently-added": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recently added tracks
         * @description Retrieves tracks that were recently added to the library
         */
        get: {
            parameters: {
                query: {
                    /** @description User ID */
                    userID: number;
                    /** @description Maximum number of tracks to return (default 10) */
                    limit?: number;
                    /** @description Number of days to look back (default 30) */
                    days?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Tracks retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Track"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/music/tracks/top": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get top tracks
         * @description Retrieves the top tracks based on play count, ratings, etc.
         */
        get: {
            parameters: {
                query: {
                    /** @description User ID */
                    userID: number;
                    /** @description Maximum number of tracks to return (default 10) */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Tracks retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Track"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/music/user/albums/favorites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user favorite albums
         * @description Retrieves albums that a user has marked as favorites
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of albums to return (default 10) */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Albums retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Album"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/music/user/artists/favorites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user favorite artists
         * @description Retrieves artists that a user has marked as favorites
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of artists to return (default 10) */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Artists retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Artist"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/music/user/tracks/favorites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user favorite tracks
         * @description Retrieves tracks that a user has marked as favorites
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of tracks to return (default 10) */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Tracks retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Track"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/music/user/tracks/recently-played": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recently played tracks
         * @description Retrieves tracks that a user has recently played
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of tracks to return (default 10) */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Tracks retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Track"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/music/user/tracks/{trackID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update user data for a track
         * @description Updates user-specific data for a track (favorite, rating, etc.)
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Track ID */
                    trackID: number;
                };
                cookie?: never;
            };
            /** @description Updated user data */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.UserMediaItemDataRequest"];
                };
            };
            responses: {
                /** @description Track updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-types_Track"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Track not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/media/series/continue-watching": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get series in progress
         * @description Retrieves series that are currently in progress (partially watched)
         */
        get: {
            parameters: {
                query: {
                    /** @description User ID */
                    userId: number;
                    /** @description Maximum number of series to return (default 10) */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Series retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_types_Series"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/series/creator/{creatorId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get series by creator
         * @description Retrieves series created by a specific creator
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of series to return (default 10) */
                    limit?: number;
                    /** @description Offset for pagination (default 0) */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description Creator ID */
                    creatorId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Series retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_types_Series"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/series/network/{network}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get series by network
         * @description Retrieves series from a specific TV network
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of series to return (default 10) */
                    limit?: number;
                    /** @description Offset for pagination (default 0) */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description Network name */
                    network: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Series retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_types_Series"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/series/next-up": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get next episodes to watch
         * @description Retrieves the next unwatched episodes for series in progress
         */
        get: {
            parameters: {
                query: {
                    /** @description User ID */
                    userId: number;
                    /** @description Maximum number of episodes to return (default 10) */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Episodes retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_types_Episode"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/series/recently-aired": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recently aired episodes
         * @description Retrieves episodes that have recently aired based on their air date
         */
        get: {
            parameters: {
                query: {
                    /** @description User ID */
                    userId: number;
                    /** @description Maximum number of episodes to return (default 10) */
                    limit?: number;
                    /** @description Number of days to look back (default 7) */
                    days?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Episodes retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_types_Episode"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/series/{id}/episodes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all episodes for a series
         * @description Retrieves all episodes across all seasons for a specific series
         */
        get: {
            parameters: {
                query: {
                    /** @description User ID */
                    userId: number;
                };
                header?: never;
                path: {
                    /** @description Series ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Episodes retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_types_Episode"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Series not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/series/{seriesID}/seasons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get seasons for a series
         * @description Retrieves all seasons for a specific series
         */
        get: {
            parameters: {
                query: {
                    /** @description User ID */
                    userId: number;
                };
                header?: never;
                path: {
                    /** @description Series ID */
                    seriesID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Seasons retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_types_Season"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Series not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/series/{seriesID}/seasons/{seasonNumber}/episodes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get episodes for a season
         * @description Retrieves all episodes for a specific season of a series
         */
        get: {
            parameters: {
                query: {
                    /** @description User ID */
                    userId: number;
                };
                header?: never;
                path: {
                    /** @description Series ID */
                    seriesID: number;
                    /** @description Season number */
                    seasonNumber: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Episodes retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_types_Episode"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Series or season not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/{mediaType}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get media items by type
         * @description Retrieves media items of a specific type
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of items to return (default 20) */
                    limit?: number;
                    /** @description Offset for pagination (default 0) */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description Media type */
                    mediaType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Media items retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_MediaData"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new user-owned media item
         * @description Creates a new media item owned by a user
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Media type */
                    mediaType: string;
                };
                cookie?: never;
            };
            /** @description Media item data with type, client info, and type-specific data */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.MediaItemCreateRequest"];
                };
            };
            responses: {
                /** @description Media item created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-types_MediaData"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Media item not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/{mediaType}/client/{clientID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get media items by client
         * @description Retrieves media items associated with a specific client
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of items to return (default 20) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Client ID */
                    clientID: number;
                    /** @description Media type */
                    mediaType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Media items retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_MediaData"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/{mediaType}/external/{source}/{externalId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get media item by external source ID
         * @description Retrieves a media item using its external source ID (e.g., TMDB ID)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description External source name (e.g., tmdb, imdb) */
                    source: string;
                    /** @description Media type */
                    mediaType: string;
                    /** @description External ID from the source */
                    externalId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Media item retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-types_MediaData"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Media item not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/{mediaType}/external/{source}/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get media item by external ID
         * @description Retrieves a specific media item by its external ID from a source
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Source of the external ID (e.g., tmdb, imdb) */
                    source: string;
                    /** @description External ID */
                    id: string;
                    /** @description Media type */
                    mediaType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Media item retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-types_MediaData"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Media item not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/{mediaType}/genre/{genre}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get media items by genre
         * @description Retrieves media items that match a specific genre
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of items to return (default 20) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Genre name */
                    genre: string;
                    /** @description Media type */
                    mediaType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Media items retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_MediaData"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/{mediaType}/latest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get latest added media items
         * @description Retrieves the most recently added media items
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of items to return (default 20) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Media type */
                    mediaType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Media items retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_MediaData"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/{mediaType}/most-played": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get most played media items
         * @description Retrieves the most played media items
         */
        get: {
            parameters: {
                query?: {
                    /** @description User ID */
                    userID?: number;
                    /** @description Maximum quantity items to return (default 20) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Media type */
                    mediaType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Media items retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_MediaData"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/{mediaType}/person/{personID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get media items by person
         * @description Retrieves media items associated with a specific person (actor, director, etc.)
         */
        get: {
            parameters: {
                query?: {
                    /** @description Role filter (actor, director, etc.) */
                    role?: string;
                    /** @description Maximum number of items to return (default 20) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Person ID */
                    personID: number;
                    /** @description Media type */
                    mediaType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Media items retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_MediaData"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/{mediaType}/popular": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get popular media items
         * @description Retrieves popular media items based on views or ratings
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of items to return (default 20) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Media type */
                    mediaType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Media items retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_MediaData"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/{mediaType}/rating/{rating}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get media items by rating
         * @description Retrieves media items that match a specific rating
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of media items to return (default 20) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Rating */
                    rating: number;
                    /** @description Media type */
                    mediaType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Media items retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_MediaData"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/{mediaType}/recently-added": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recently added media items
         * @description Retrieves recently added media items of a specific type
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of items to return (default 20) */
                    limit?: number;
                    /** @description Number of days to look back (default 30) */
                    days?: number;
                };
                header?: never;
                path: {
                    /** @description Media type */
                    mediaType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Media items retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_MediaData"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/{mediaType}/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search media items
         * @description Searches for media items based on query parameters
         */
        get: {
            parameters: {
                query: {
                    /** @description Search query */
                    q: string;
                    /** @description Maximum number of items to return (default 20) */
                    limit?: number;
                    /** @description Offset for pagination (default 0) */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description Media type */
                    mediaType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Media items retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_MediaData"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/{mediaType}/top-rated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get top rated media items
         * @description Retrieves the highest rated media items
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of items to return (default 20) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Media type */
                    mediaType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Media items retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_MediaData"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/{mediaType}/user/{userID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get media items by user ID
         * @description Retrieves media items owned by a specific user
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of items to return (default 20) */
                    limit?: number;
                    /** @description Offset for pagination (default 0) */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description User ID */
                    userID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User media items retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_MediaData"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/{mediaType}/year/{year}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get media items by release year
         * @description Retrieves media items released in a specific year
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of items to return (default 20) */
                    limit?: number;
                };
                header?: never;
                path: {
                    /** @description Release year */
                    year: number;
                    /** @description Media type */
                    mediaType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Media items retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_MediaData"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/{mediaType}/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get media item by ID
         * @description Retrieves a specific media item by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Media Item ID */
                    id: number;
                    /** @description Media type */
                    mediaType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Media item retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-types_MediaData"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Media item not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/{mediaType}/{itemID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update an existing user-owned media item
         * @description Updates an existing media item owned by a user
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Media Item ID */
                    itemID: number;
                };
                cookie?: never;
            };
            /** @description Updated media item data */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.MediaItemUpdateRequest"];
                };
            };
            responses: {
                /** @description Media item updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-types_MediaData"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Not authorized to update this media item */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Media item not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete a user-owned media item
         * @description Deletes a user-owned media item by its ID
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User Media Item ID */
                    itemID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully deleted user media item */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.SuccessResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/people": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for people by name
         * @description Searches for people whose names match the provided query
         */
        get: {
            parameters: {
                query: {
                    /** @description Search query */
                    q: string;
                    /** @description Maximum number of results to return */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description People retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_Person"][];
                    };
                };
                /** @description Missing search query or invalid limit */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new person
         * @description Creates a new person record with the provided information
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Person information */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.CreatePersonRequest"];
                };
            };
            responses: {
                /** @description Person created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_Person"];
                    };
                };
                /** @description Invalid request format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/people/import": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import a person from an external source
         * @description Imports a person from an external source with the provided details
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Person import information */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.ImportPersonRequest"];
                };
            };
            responses: {
                /** @description Person imported successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_Person"];
                    };
                };
                /** @description Invalid request format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/people/popular": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get popular people
         * @description Retrieves a list of popular people, sorted by popularity
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of results to return */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Popular people retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_Person"][];
                    };
                };
                /** @description Invalid limit */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/people/roles/{role}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get people by role
         * @description Retrieves people filtered by their professional role (Actor, Director, etc.)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Role to filter by (e.g., 'Actor', 'Director') */
                    role: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description People retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_Person"][];
                    };
                };
                /** @description Missing role parameter */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/people/{personID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get person by ID
         * @description Retrieves a specific person by their ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Person ID */
                    personID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Person retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_Person"];
                    };
                };
                /** @description Invalid person ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Person not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        /**
         * Update an existing person
         * @description Updates a person record with the provided information
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Person ID */
                    personID: number;
                };
                cookie?: never;
            };
            /** @description Updated person information */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.UpdatePersonRequest"];
                };
            };
            responses: {
                /** @description Person updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_Person"];
                    };
                };
                /** @description Invalid person ID or request format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Person not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete a person
         * @description Deletes a person record by ID
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Person ID */
                    personID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Person deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.SuccessResponse"];
                    };
                };
                /** @description Invalid person ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Person not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/people/{personID}/credits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get person with their credits
         * @description Retrieves a specific person along with all their credits
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Person ID */
                    personID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Person and their credits retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_PersonWithCredits"];
                    };
                };
                /** @description Invalid person ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Person not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/people/{personID}/credits/grouped": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a person's credits grouped by type
         * @description Retrieves a person's credits organized by department and role
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Person ID */
                    personID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Credits grouped by department and role */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_PersonCreditsByRole"];
                    };
                };
                /** @description Invalid person ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/people/{personID}/external-ids": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add external ID to person
         * @description Adds or updates an external ID reference for a person
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Person ID */
                    personID: number;
                };
                cookie?: never;
            };
            /** @description External ID information */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.ExternalIDRequest"];
                };
            };
            responses: {
                /** @description External ID added successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.SuccessResponse"];
                    };
                };
                /** @description Invalid person ID or request format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recommendations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recommendations for the current user
         * @description Retrieves a list of recommendations for the authenticated user
         */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by media type (movie, series, music) */
                    mediaType?: string;
                    /** @description Number of recommendations to return (default: 20) */
                    limit?: number;
                    /** @description Offset for pagination (default: 0) */
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Recommendations retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-responses_RecommendationsListResponse"];
                    };
                };
                /** @description Invalid request parameters */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recommendations/rate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Rate a recommendation
         * @description Sets a user rating for a specific recommendation
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Recommendation ID and rating */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.RateRecommendationRequest"];
                };
            };
            responses: {
                /** @description Recommendation rated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-any"];
                    };
                };
                /** @description Invalid request parameters */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Recommendation not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recommendations/recent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recent recommendations for the current user
         * @description Retrieves a list of recently created recommendations for the authenticated user
         */
        get: {
            parameters: {
                query?: {
                    /** @description Number of days to look back (default: 7) */
                    days?: number;
                    /** @description Filter by media type (movie, series, music) */
                    mediaType?: string;
                    /** @description Number of recommendations to return (default: 20) */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Recent recommendations retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-responses_RecommendationsListResponse"];
                    };
                };
                /** @description Invalid request parameters */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recommendations/top": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get top-scored recommendations for the current user
         * @description Retrieves a list of top-scored recommendations for the authenticated user
         */
        get: {
            parameters: {
                query?: {
                    /** @description Minimum score (0-1) for recommendations (default: 0.7) */
                    minScore?: string;
                    /** @description Filter by media type (movie, series, music) */
                    mediaType?: string;
                    /** @description Number of recommendations to return (default: 20) */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Top recommendations retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-responses_RecommendationsListResponse"];
                    };
                };
                /** @description Invalid request parameters */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recommendations/view": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mark a recommendation as viewed
         * @description Marks a specific recommendation as viewed for the authenticated user
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Recommendation ID to mark as viewed */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.MarkRecommendationAsViewedRequest"];
                };
            };
            responses: {
                /** @description Recommendation marked as viewed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-any"];
                    };
                };
                /** @description Invalid request parameters */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Recommendation not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recommendations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a specific recommendation by ID
         * @description Retrieves a specific recommendation by its ID for the authenticated user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Recommendation ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Recommendation retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-responses_RecommendationResponse"];
                    };
                };
                /** @description Invalid recommendation ID */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Recommendation not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for content across all sources
         * @description Searches for content in the database, media clients, and metadata sources
         */
        get: {
            parameters: {
                query: {
                    /** @description Search query */
                    query: string;
                    /** @description Limit search to specific media type (movie, series, music, person) */
                    mediaType?: string;
                    /** @description Maximum number of results */
                    limit?: number;
                    /** @description Offset for pagination */
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.SearchResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/recent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recent searches for the current user
         * @description Returns a list of the user's recent searches
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of results */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.RecentSearchesResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/suggestions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get search suggestions
         * @description Returns suggestions based on partial search input
         */
        get: {
            parameters: {
                query: {
                    /** @description Partial search query */
                    q: string;
                    /** @description Maximum number of suggestions */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.SearchSuggestionsResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search/trending": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get trending searches across all users
         * @description Returns a list of popular searches across the platform
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of results */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.TrendingSearchesResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/series/user/continue-watching": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get series in progress
         * @description Retrieves series that are currently in progress (partially watched)
         */
        get: {
            parameters: {
                query: {
                    /** @description User ID */
                    userId: number;
                    /** @description Maximum number of series to return (default 10) */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Series retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Series"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/series/user/favorites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user favorite series
         * @description Retrieves series that a user has marked as favorites
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of series to return (default 10) */
                    limit?: number;
                    /** @description Offset for pagination (default 0) */
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Series retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Series"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/series/user/next-up": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get next episodes to watch
         * @description Retrieves the next unwatched episodes for series in progress
         */
        get: {
            parameters: {
                query: {
                    /** @description User ID */
                    userId: number;
                    /** @description Maximum number of episodes to return (default 10) */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Episodes retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Episode"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/series/user/recently-watched": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get recently watched episodes
         * @description Retrieves the user's recently watched episodes
         */
        get: {
            parameters: {
                query: {
                    /** @description User ID */
                    userId: number;
                    /** @description Number of days to look back (default 7) */
                    days?: number;
                    /** @description Maximum number of episodes to return (default 10) */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Episodes retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Episode"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/series/user/watched": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user watched series
         * @description Retrieves series that a user has watched
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of series to return (default 10) */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Series retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Series"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/series/user/watchlist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get series in user watchlist
         * @description Retrieves series that a user has added to their watchlist
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of series to return (default 10) */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Series retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_Series"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/series/user/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update user data for a series
         * @description Updates user-specific data for a series (favorite, watched status, rating, etc.)
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Series ID */
                    id: number;
                };
                cookie?: never;
            };
            /** @description Updated user data */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["models.UserMediaItemData-types_Series"];
                };
            };
            responses: {
                /** @description Series updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-types_Series"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Series not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/user-config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user configuration
         * @description Returns the configuration for the current user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User configuration retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_UserConfig"];
                    };
                };
                /** @description Unauthorized access */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        /**
         * Update user configuration
         * @description Updates the configuration for the current user
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description User configuration data */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["models.UserConfig"];
                };
            };
            responses: {
                /** @description User configuration updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-any"];
                    };
                };
                /** @description Invalid request format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized access */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-data/data/{dataID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a specific user media item data entry by ID
         * @description Retrieves a specific user media item data entry by its ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User Media Item Data ID */
                    dataID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved user media item data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_UserMediaItemData-types_MediaData"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-data/{mediaType}/clear": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Clear a user's play user-data
         * @description Delete all play user-data entries for a user
         */
        delete: {
            parameters: {
                query?: {
                    /** @description User ID (optional, uses authenticated user ID if not provided) */
                    userID?: number;
                };
                header?: never;
                path: {
                    /** @description Media type like movie, series, track, etc. */
                    mediaType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description History cleared successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-any"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-data/{mediaType}/continue-watching": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a user's continue watching list
         * @description Get media items that a user has started but not completed
         */
        get: {
            parameters: {
                query?: {
                    /** @description User ID (optional, uses authenticated user ID if not provided) */
                    userID?: number;
                    /** @description Number of items to return (default 10) */
                    limit?: number;
                    /** @description Media type filter (movie, series, episode, track, etc.) */
                    type?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved continue watching items */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_UserMediaItemData-types_MediaData"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-data/{mediaType}/favorites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a user's favorite media items
         * @description Get all media items marked as favorites by a user
         */
        get: {
            parameters: {
                query?: {
                    /** @description User ID (optional, uses authenticated user ID if not provided) */
                    userID?: number;
                    /** @description Number of items to return (default 10) */
                    limit?: number;
                    /** @description Number of items to skip (default 0) */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description Media type like movie, series, track, etc. */
                    mediaType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved favorites */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_UserMediaItemData-types_MediaData"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-data/{mediaType}/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a user's media play user-data
         * @description Get a user's media play user-data with optional filtering
         */
        get: {
            parameters: {
                query?: {
                    /** @description User ID (optional, uses authenticated user ID if not provided) */
                    userID?: number;
                    /** @description Number of items to return (default 10) */
                    limit?: number;
                    /** @description Number of items to skip (default 0) */
                    offset?: number;
                    /** @description Filter by completion status */
                    completed?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved play user-data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_UserMediaItemData-types_MediaData"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-data/{mediaType}/recent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a user's recent media user-data
         * @description Get a user's recent media user-data
         */
        get: {
            parameters: {
                query?: {
                    /** @description User ID (optional, uses authenticated user ID if not provided) */
                    userID?: number;
                    /** @description Number of items to return (default 10) */
                    limit?: number;
                    /** @description Number of days to look back (default 7) */
                    days?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved recent user-data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_UserMediaItemData-types_MediaData"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-data/{mediaType}/{id}/check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check if a user has data for a specific media item
         * @description Checks if a user has data for a specific media item
         */
        get: {
            parameters: {
                query?: {
                    /** @description User ID (optional, uses authenticated user ID if not provided) */
                    userID?: number;
                };
                header?: never;
                path: {
                    /** @description Media Item ID */
                    id: number;
                    /** @description Media type like movie, series, track, etc. */
                    mediaType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully checked user media item data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-bool"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-data/{mediaType}/{itemID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user media item data for a specific user and media item
         * @description Retrieves user media item data for a specific user and media item
         */
        get: {
            parameters: {
                query?: {
                    /** @description User ID (optional, uses authenticated user ID if not provided) */
                    userID?: number;
                };
                header?: never;
                path: {
                    /** @description Media Item ID */
                    itemID: number;
                    /** @description Media type */
                    mediaType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved user media item data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_UserMediaItemData-types_MediaData"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete a specific user media item data entry
         * @description Deletes a specific user media item data entry by its ID
         */
        delete: {
            parameters: {
                query?: {
                    /** @description User ID (optional, uses authenticated user ID if not provided) */
                    userID?: number;
                };
                header?: never;
                path: {
                    /** @description User Media Item ID */
                    itemID: number;
                    /** @description Media type like movie, series, track, etc. */
                    mediaType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully deleted user media item data */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_UserMediaItemData-types_MediaData"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-data/{mediaType}/{itemID}/favorite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Toggle favorite status for a media item
         * @description Mark or unmark a media item as a favorite
         */
        put: {
            parameters: {
                query: {
                    /** @description Favorite status */
                    favorite: boolean;
                    /** @description User ID (optional, uses authenticated user ID if not provided) */
                    userID?: number;
                };
                header?: never;
                path: {
                    /** @description Media type like movie, series, track, etc. */
                    mediaType: string;
                    /** @description Media Item ID */
                    itemID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Favorite status updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_UserMediaItemData-types_MediaData"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-data/{mediaType}/{itemID}/rating": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update user rating for a media item
         * @description Set a user's rating for a media item
         */
        put: {
            parameters: {
                query: {
                    /** @description User rating (0-10) */
                    rating: number;
                    /** @description User ID (optional, uses authenticated user ID if not provided) */
                    userID?: number;
                };
                header?: never;
                path: {
                    /** @description Media type like movie, series, track, etc. */
                    mediaType: string;
                    /** @description Media Item ID */
                    itemID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Rating updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_UserMediaItemData-types_MediaData"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-data/{mediaType}/{itemID}/record": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Record a media play event
         * @description Record a new play event for a media item
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Media Item ID */
                    itemID: number;
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["requests.UserMediaItemDataRequest"];
            responses: {
                /** @description Play event recorded successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_UserMediaItemData-types_MediaData"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/avatar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload user avatar
         * @description Uploads a new avatar image for the currently authenticated user
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "multipart/form-data": {
                        /**
                         * Format: binary
                         * @description Avatar image file (jpeg, png, gif only)
                         */
                        avatar: string;
                    };
                };
            };
            responses: {
                /** @description Successfully uploaded avatar */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-requests_AvatarUploadResponse"];
                    };
                };
                /** @description Invalid file format or size */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized - Not logged in */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/forgot-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Forgot password
         * @description Request a password reset email
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Forgot password request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.ForgotPasswordRequest"];
                };
            };
            responses: {
                /** @description Password reset email sent */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.SuccessResponse"];
                    };
                };
                /** @description Invalid request format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized - Not logged in */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Change user password
         * @description Changes the password for the currently authenticated user
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Password change information */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.ChangePasswordRequest"];
                };
            };
            responses: {
                /** @description Password changed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.SuccessResponse"];
                    };
                };
                /** @description Invalid request format or incorrect current password */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized - Not logged in */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the current user's profile
         * @description Retrieves the profile information for the currently authenticated user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved user profile */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-responses_UserResponse"];
                    };
                };
                /** @description Unauthorized - Not logged in */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        /**
         * Update user profile
         * @description Updates the profile information for the currently authenticated user
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Updated profile information */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.UpdateUserRequest"];
                };
            };
            responses: {
                /** @description Successfully updated user profile */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-responses_UserResponse"];
                    };
                };
                /** @description Invalid request format or email/username already exists */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized - Not logged in */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register a new user
         * @description Creates a new user account with the provided information
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description User registration information */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.RegisterRequest"];
                };
            };
            responses: {
                /** @description Successfully registered user */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-responses_UserResponse"];
                    };
                };
                /** @description Invalid request format or email/username already exists */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset password
         * @description Reset the user's password using a password reset token
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Reset password request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.ResetPasswordRequest"];
                };
            };
            responses: {
                /** @description Password reset successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.SuccessResponse"];
                    };
                };
                /** @description Invalid request format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized - Not logged in */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Password reset token not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{userID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user by ID
         * @description Retrieves a user by their userID (admin only)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User ID */
                    userID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved user */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-responses_UserResponse"];
                    };
                };
                /** @description Invalid user userID format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized - Not logged in */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Forbidden - Not an admin */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete a user account
         * @description Deletes a user account (admin only)
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User ID */
                    userID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content - User successfully deleted */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid user userID format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "*/*": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized - Not logged in */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "*/*": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Forbidden - Not an admin */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "*/*": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "*/*": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "*/*": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{userID}/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Activate a user account
         * @description Activates a user account (admin only)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User ID */
                    userID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully activated user account */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-responses_UserResponse"];
                    };
                };
                /** @description Invalid user userID format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized - Not logged in */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Forbidden - Not an admin */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{userID}/deactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deactivate a user account
         * @description Deactivates a user account (admin only)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User ID */
                    userID: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully deactivated user account */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-responses_UserResponse"];
                    };
                };
                /** @description Invalid user userID format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized - Not logged in */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Forbidden - Not an admin */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{userID}/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Change user role
         * @description Changes a user's role (admin only)
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User ID */
                    userID: number;
                };
                cookie?: never;
            };
            /** @description New role information */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.ChangeRoleRequest"];
                };
            };
            responses: {
                /** @description Successfully changed user role */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-responses_UserResponse"];
                    };
                };
                /** @description Invalid user userID format or invalid role */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Unauthorized - Not logged in */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Forbidden - Not an admin */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-responses_ErrorDetails"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{listType}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all lists
         * @description Retrieves all lists in the database
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of lists to return (default 10) */
                    limit?: number;
                    /** @description Offset for pagination (default 0) */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description List type (e.g. 'playlist', 'collection') */
                    listType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Lists retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_ListData"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{listType}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new list
         * @description Creates a new list for the authenticated user
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description List details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.ListCreateRequest"];
                };
            };
            responses: {
                /** @description List created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-types_Playlist"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{listType}/favorites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get favorites
         * @description Retrieves the favorites for the authenticated user
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of lists to return (default 20) */
                    limit?: number;
                    /** @description Offset for pagination (default 0) */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description User ID */
                    userID: number;
                    /** @description List type (e.g. 'playlist', 'collection') */
                    listType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Lists retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_ListData"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{listType}/genre/{genre}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get lists by genre
         * @description Retrieves lists that match a specific genre
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Genre name */
                    genre: string;
                    /** @description List type (e.g. 'playlist', 'collection') */
                    listType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Lists retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_ListData"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{listType}/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search lists
         * @description Searches for lists that match the query
         */
        get: {
            parameters: {
                query: {
                    /** @description Search query */
                    q: string;
                };
                header?: never;
                path: {
                    /** @description List type (e.g. 'playlist', 'collection') */
                    listType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Lists retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_ListData"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{listType}/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user's lists
         * @description Retrieves all lists owned by the authenticated user
         */
        get: {
            parameters: {
                query?: {
                    /** @description Maximum number of lists to return (default 20) */
                    limit?: number;
                    /** @description Offset for pagination (default 0) */
                    offset?: number;
                    /** @description User ID */
                    userID?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Lists retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-array_models_MediaItem-types_ListData"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{listType}/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a list
         * @description Deletes a list owned by the authenticated user
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description List ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-any"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description List not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{listType}/{id}/reorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reorder list items
         * @description Reorders the items in a list
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description List ID */
                    id: number;
                    /** @description List type (e.g. 'playlist', 'collection') */
                    listType: string;
                };
                cookie?: never;
            };
            /** @description Reorder request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.ListReorderRequest"];
                };
            };
            responses: {
                /** @description List reordered successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-types_ListData"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description List not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{listType}/{id}/tracks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add a track to a list
         * @description Adds a track to a list owned by the authenticated user
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description List ID */
                    id: number;
                };
                cookie?: never;
            };
            /** @description Track details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.ListAddTrackRequest"];
                };
            };
            responses: {
                /** @description Track added successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-types_Playlist"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description List not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{listType}/{id}/tracks/{trackId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove a track from a list
         * @description Removes a track from a list owned by the authenticated user
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description List ID */
                    id: number;
                    /** @description Track ID */
                    trackId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Track removed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-types_Playlist"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description List not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{listType}/{listID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get playlist by ID
         * @description Retrieves a specific playlist by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description List ID */
                    listID: number;
                    /** @description List type (e.g. 'playlist', 'collection') */
                    listType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-types_ListData"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description List not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{listType}/{listID}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get tracks in a playlist
         * @description Retrieves all tracks in a specific playlist
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description List ID */
                    listID: number;
                    /** @description List type (e.g. 'playlist', 'collection') */
                    listType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Tracks retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItemList"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description List not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{listType}/{listID}/items/{itemID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add an item to a playlist
         * @description Adds a media item to an existing playlist
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description List ID */
                    listID: number;
                    /** @description Item ID to add */
                    itemID: string;
                    /** @description List type (e.g. 'playlist', 'collection') */
                    listType: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Item added to playlist */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.SuccessResponse"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description List not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/{listType}/{listId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update a list
         * @description Updates an existing list owned by the authenticated user
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description List ID */
                    listId: number;
                    /** @description List type (e.g. 'playlist', 'collection') */
                    listType: string;
                };
                cookie?: never;
            };
            /** @description Updated list details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["requests.ListUpdateRequest"];
                };
            };
            responses: {
                /** @description List updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.APIResponse-models_MediaItem-types_Playlist"];
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description List not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["responses.ErrorResponse-any"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        "errors.ErrorType": ErrorsErrorType;
        "map_string_array_models.MediaItem-types_MediaData": {
            [key: string]: components["schemas"]["models.MediaItem-types_MediaData"][];
        };
        "models.AIModelPreferences": {
            /** @example 4000 */
            defaultMaxTokens?: number;
            /** @example claude-3-opus-20240229 */
            defaultModelForChat?: string;
            /** @example claude-3-opus-20240229 */
            defaultModelForRecommendations?: string;
            /** @example 0.7 */
            defaultTemperature?: number;
        };
        "models.Award": {
            category?: string;
            isWinner?: boolean;
            name?: string;
            /** @description Movie/show the award was for */
            production?: string;
            year?: number;
        };
        "models.Client-types_ClientConfig": {
            category?: components["schemas"]["types.ClientCategory"];
            config?: components["schemas"]["models.ClientConfigWrapper-types_ClientConfig"];
            createdAt?: string;
            deletedAt?: string;
            /** @description Internal ID */
            id?: number;
            isEnabled?: boolean;
            name?: string;
            type?: components["schemas"]["types.ClientType"];
            updatedAt?: string;
            userID?: number;
        };
        "models.ClientConfigWrapper-types_ClientConfig": {
            data?: unknown;
        };
        "models.ClientList": Record<string, never>;
        "models.Credit": {
            /** @description For actors */
            character?: string;
            createdAt?: string;
            deletedAt?: string;
            /** @description e.g., "Directing", "Writing", "Sound" */
            department?: components["schemas"]["models.MediaDepartment"];
            /** @description Number of episodes for TV series */
            episodeCount?: number;
            /** @description Internal ID */
            id?: number;
            isArtist?: boolean;
            /** @description Credit type flags */
            isCast?: boolean;
            isCreator?: boolean;
            isCrew?: boolean;
            isGuest?: boolean;
            /** @description Specific job title */
            job?: string;
            mediaItemID?: number;
            /** @description Credit metadata (awards, notes, etc.) */
            metadata?: components["schemas"]["models.CreditMetadata"];
            /** @description Name as it appears in the credits */
            name?: string;
            /** @description Display order in credits */
            order?: number;
            person?: components["schemas"]["models.Person"];
            personID?: number;
            /** @description e.g., "Director", "Actor" */
            role?: components["schemas"]["models.MediaRole"];
            /** @description For TV series credits */
            seasonNumber?: number;
            updatedAt?: string;
        };
        "models.CreditAward": {
            category?: string;
            isNominee?: boolean;
            isWinner?: boolean;
            name?: string;
            year?: number;
        };
        "models.CreditMetadata": {
            additionalInfo?: {
                [key: string]: unknown;
            };
            awards?: components["schemas"]["models.CreditAward"][];
            notes?: string;
            specialPerformance?: boolean;
            uncredited?: boolean;
            voiceOnly?: boolean;
        };
        "models.DefaultClients": {
            /** @example 1 */
            aiClientId?: number;
            /** @example 1 */
            bookAutomationId?: number;
            /**
             * @description TODO: Add support for books. Should it be books vs audiobooks? How would I want to handle that?
             * @example 1
             */
            bookClientId?: number;
            /** @example 1 */
            movieAutomationId?: number;
            /** @example 1 */
            musicAutomationId?: number;
            /** @example 1 */
            musicClientId?: number;
            /** @example 1 */
            seriesAutomationId?: number;
            /** @example 1 */
            videoClientId?: number;
        };
        "models.ExternalID": {
            /** @description The actual ID */
            id?: string;
            /** @description e.g., "tmdb", "imdb", "trakt", "tvdb" */
            source?: string;
        };
        "models.ExternalIDMap": {
            [key: string]: string;
        };
        "models.ExternalLink": {
            name?: string;
            url?: string;
        };
        "models.Genres": {
            /** @example [
             *       "action",
             *       "comedy",
             *       "drama"
             *     ] */
            anime?: string[];
            /** @example [
             *       "fantasy",
             *       "horror",
             *       "mystery"
             *     ] */
            books?: string[];
            /** @example [
             *       "action",
             *       "comedy",
             *       "drama"
             *     ] */
            games?: string[];
            /** @example [
             *       "action",
             *       "comedy",
             *       "drama"
             *     ] */
            movies?: string[];
            /** @example [
             *       "electronic",
             *       "pop",
             *       "rock"
             *     ] */
            music?: string[];
            /** @example [
             *       "action",
             *       "comedy",
             *       "drama"
             *     ] */
            series?: string[];
        };
        "models.JobRun": {
            createdAt?: string;
            deletedAt?: string;
            /** @description When the job finished running */
            endTime?: string;
            /** @description Any error message from the job run */
            errorMessage?: string;
            /** @description Internal ID */
            id?: number;
            /** @description The name of the job */
            jobName?: string;
            /** @description Type of job (recommendation, sync, etc.) */
            jobType?: components["schemas"]["models.JobType"];
            /** @description Metadata related to the job (stored as JSON) */
            metadata?: string;
            /** @description Items processed so far */
            processedItems?: number;
            /** @description Progress percentage (0-100) */
            progress?: number;
            /** @description When the job started running */
            startTime?: string;
            /** @description Status of the job run */
            status?: components["schemas"]["models.JobStatus"];
            /** @description Current status message */
            statusMessage?: string;
            /** @description Total items to process */
            totalItems?: number;
            updatedAt?: string;
            /** @description User ID associated with the job, if applicable */
            userID?: number;
        };
        "models.JobSchedule": {
            /** @description Any configuration for the job (stored as JSON) */
            config?: string;
            createdAt?: string;
            deletedAt?: string;
            /** @description Whether the job is enabled */
            enabled?: boolean;
            /** @description How often the job should run */
            frequency?: string;
            /** @description Internal ID */
            id?: number;
            /** @description Unique name of the job */
            jobName?: string;
            /** @description Type of job (recommendation, sync, etc.) */
            jobType?: components["schemas"]["models.JobType"];
            /** @description When the job last ran */
            lastRunTime?: string;
            updatedAt?: string;
            /** @description User ID associated with the job, if applicable (for user-specific jobs) */
            userID?: number;
        };
        /** @enum {string} */
        "models.JobStatus": ModelsJobStatus;
        /** @enum {string} */
        "models.JobType": ModelsJobType;
        "models.ListItem": {
            itemUUID?: string;
            lastChanged?: string;
            position?: number;
        };
        "models.MaxRecommendations": {
            /** @example 20 */
            anime?: number;
            /** @example 20 */
            books?: number;
            /** @example 20 */
            games?: number;
            /** @example 20 */
            movies?: number;
            /** @example 20 */
            music?: number;
            /** @example 20 */
            series?: number;
        };
        /** @enum {string} */
        "models.MediaDepartment": ModelsMediaDepartment;
        "models.MediaItem-any": {
            createdAt?: string;
            /** @description Type-specific media data */
            data?: unknown;
            deletedAt?: string;
            downloadUrl?: string;
            /** @description External IDs for this item (TMDB, IMDB, etc.) */
            externalIds?: components["schemas"]["models.ExternalID"][];
            /** @description Internal ID */
            id?: number;
            /** @description Whether this item is public or not */
            isPublic?: boolean;
            /** @description ID of the user that owns this item, 0 for system owned items */
            ownerId?: number;
            releaseDate?: string;
            releaseYear?: number;
            streamUrl?: string;
            /** @description Client IDs for this item (mapping client to their IDs) */
            syncClients?: components["schemas"]["models.SyncClient"][];
            title?: string;
            /** @description Type of media (movie, show, episode, etc.) */
            type?: components["schemas"]["types.MediaType"];
            updatedAt?: string;
            /** @description Stable UUID for syncing */
            uuid?: string;
        };
        "models.MediaItem-suasor_clients_media_types_Movie": {
            createdAt?: string;
            /** @description Type-specific media data */
            data?: components["schemas"]["suasor_clients_media_types.Movie"];
            deletedAt?: string;
            downloadUrl?: string;
            /** @description External IDs for this item (TMDB, IMDB, etc.) */
            externalIds?: components["schemas"]["models.ExternalID"][];
            /** @description Internal ID */
            id?: number;
            /** @description Whether this item is public or not */
            isPublic?: boolean;
            /** @description ID of the user that owns this item, 0 for system owned items */
            ownerId?: number;
            releaseDate?: string;
            releaseYear?: number;
            streamUrl?: string;
            /** @description Client IDs for this item (mapping client to their IDs) */
            syncClients?: components["schemas"]["models.SyncClient"][];
            title?: string;
            /** @description Type of media (movie, show, episode, etc.) */
            type?: components["schemas"]["types.MediaType"];
            updatedAt?: string;
            /** @description Stable UUID for syncing */
            uuid?: string;
        };
        "models.MediaItem-types_Album": {
            createdAt?: string;
            /** @description Type-specific media data */
            data?: components["schemas"]["types.Album"];
            deletedAt?: string;
            downloadUrl?: string;
            /** @description External IDs for this item (TMDB, IMDB, etc.) */
            externalIds?: components["schemas"]["models.ExternalID"][];
            /** @description Internal ID */
            id?: number;
            /** @description Whether this item is public or not */
            isPublic?: boolean;
            /** @description ID of the user that owns this item, 0 for system owned items */
            ownerId?: number;
            releaseDate?: string;
            releaseYear?: number;
            streamUrl?: string;
            /** @description Client IDs for this item (mapping client to their IDs) */
            syncClients?: components["schemas"]["models.SyncClient"][];
            title?: string;
            /** @description Type of media (movie, show, episode, etc.) */
            type?: components["schemas"]["types.MediaType"];
            updatedAt?: string;
            /** @description Stable UUID for syncing */
            uuid?: string;
        };
        "models.MediaItem-types_Artist": {
            createdAt?: string;
            /** @description Type-specific media data */
            data?: components["schemas"]["types.Artist"];
            deletedAt?: string;
            downloadUrl?: string;
            /** @description External IDs for this item (TMDB, IMDB, etc.) */
            externalIds?: components["schemas"]["models.ExternalID"][];
            /** @description Internal ID */
            id?: number;
            /** @description Whether this item is public or not */
            isPublic?: boolean;
            /** @description ID of the user that owns this item, 0 for system owned items */
            ownerId?: number;
            releaseDate?: string;
            releaseYear?: number;
            streamUrl?: string;
            /** @description Client IDs for this item (mapping client to their IDs) */
            syncClients?: components["schemas"]["models.SyncClient"][];
            title?: string;
            /** @description Type of media (movie, show, episode, etc.) */
            type?: components["schemas"]["types.MediaType"];
            updatedAt?: string;
            /** @description Stable UUID for syncing */
            uuid?: string;
        };
        "models.MediaItem-types_Episode": {
            createdAt?: string;
            /** @description Type-specific media data */
            data?: components["schemas"]["types.Episode"];
            deletedAt?: string;
            downloadUrl?: string;
            /** @description External IDs for this item (TMDB, IMDB, etc.) */
            externalIds?: components["schemas"]["models.ExternalID"][];
            /** @description Internal ID */
            id?: number;
            /** @description Whether this item is public or not */
            isPublic?: boolean;
            /** @description ID of the user that owns this item, 0 for system owned items */
            ownerId?: number;
            releaseDate?: string;
            releaseYear?: number;
            streamUrl?: string;
            /** @description Client IDs for this item (mapping client to their IDs) */
            syncClients?: components["schemas"]["models.SyncClient"][];
            title?: string;
            /** @description Type of media (movie, show, episode, etc.) */
            type?: components["schemas"]["types.MediaType"];
            updatedAt?: string;
            /** @description Stable UUID for syncing */
            uuid?: string;
        };
        "models.MediaItem-types_ListData": {
            createdAt?: string;
            /** @description Type-specific media data */
            data?: unknown;
            deletedAt?: string;
            downloadUrl?: string;
            /** @description External IDs for this item (TMDB, IMDB, etc.) */
            externalIds?: components["schemas"]["models.ExternalID"][];
            /** @description Internal ID */
            id?: number;
            /** @description Whether this item is public or not */
            isPublic?: boolean;
            /** @description ID of the user that owns this item, 0 for system owned items */
            ownerId?: number;
            releaseDate?: string;
            releaseYear?: number;
            streamUrl?: string;
            /** @description Client IDs for this item (mapping client to their IDs) */
            syncClients?: components["schemas"]["models.SyncClient"][];
            title?: string;
            /** @description Type of media (movie, show, episode, etc.) */
            type?: components["schemas"]["types.MediaType"];
            updatedAt?: string;
            /** @description Stable UUID for syncing */
            uuid?: string;
        };
        "models.MediaItem-types_MediaData": {
            createdAt?: string;
            /** @description Type-specific media data */
            data?: unknown;
            deletedAt?: string;
            downloadUrl?: string;
            /** @description External IDs for this item (TMDB, IMDB, etc.) */
            externalIds?: components["schemas"]["models.ExternalID"][];
            /** @description Internal ID */
            id?: number;
            /** @description Whether this item is public or not */
            isPublic?: boolean;
            /** @description ID of the user that owns this item, 0 for system owned items */
            ownerId?: number;
            releaseDate?: string;
            releaseYear?: number;
            streamUrl?: string;
            /** @description Client IDs for this item (mapping client to their IDs) */
            syncClients?: components["schemas"]["models.SyncClient"][];
            title?: string;
            /** @description Type of media (movie, show, episode, etc.) */
            type?: components["schemas"]["types.MediaType"];
            updatedAt?: string;
            /** @description Stable UUID for syncing */
            uuid?: string;
        };
        "models.MediaItem-types_Playlist": {
            createdAt?: string;
            /** @description Type-specific media data */
            data?: components["schemas"]["types.Playlist"];
            deletedAt?: string;
            downloadUrl?: string;
            /** @description External IDs for this item (TMDB, IMDB, etc.) */
            externalIds?: components["schemas"]["models.ExternalID"][];
            /** @description Internal ID */
            id?: number;
            /** @description Whether this item is public or not */
            isPublic?: boolean;
            /** @description ID of the user that owns this item, 0 for system owned items */
            ownerId?: number;
            releaseDate?: string;
            releaseYear?: number;
            streamUrl?: string;
            /** @description Client IDs for this item (mapping client to their IDs) */
            syncClients?: components["schemas"]["models.SyncClient"][];
            title?: string;
            /** @description Type of media (movie, show, episode, etc.) */
            type?: components["schemas"]["types.MediaType"];
            updatedAt?: string;
            /** @description Stable UUID for syncing */
            uuid?: string;
        };
        "models.MediaItem-types_Series": {
            createdAt?: string;
            /** @description Type-specific media data */
            data?: components["schemas"]["types.Series"];
            deletedAt?: string;
            downloadUrl?: string;
            /** @description External IDs for this item (TMDB, IMDB, etc.) */
            externalIds?: components["schemas"]["models.ExternalID"][];
            /** @description Internal ID */
            id?: number;
            /** @description Whether this item is public or not */
            isPublic?: boolean;
            /** @description ID of the user that owns this item, 0 for system owned items */
            ownerId?: number;
            releaseDate?: string;
            releaseYear?: number;
            streamUrl?: string;
            /** @description Client IDs for this item (mapping client to their IDs) */
            syncClients?: components["schemas"]["models.SyncClient"][];
            title?: string;
            /** @description Type of media (movie, show, episode, etc.) */
            type?: components["schemas"]["types.MediaType"];
            updatedAt?: string;
            /** @description Stable UUID for syncing */
            uuid?: string;
        };
        "models.MediaItem-types_Track": {
            createdAt?: string;
            /** @description Type-specific media data */
            data?: components["schemas"]["types.Track"];
            deletedAt?: string;
            downloadUrl?: string;
            /** @description External IDs for this item (TMDB, IMDB, etc.) */
            externalIds?: components["schemas"]["models.ExternalID"][];
            /** @description Internal ID */
            id?: number;
            /** @description Whether this item is public or not */
            isPublic?: boolean;
            /** @description ID of the user that owns this item, 0 for system owned items */
            ownerId?: number;
            releaseDate?: string;
            releaseYear?: number;
            streamUrl?: string;
            /** @description Client IDs for this item (mapping client to their IDs) */
            syncClients?: components["schemas"]["models.SyncClient"][];
            title?: string;
            /** @description Type of media (movie, show, episode, etc.) */
            type?: components["schemas"]["types.MediaType"];
            updatedAt?: string;
            /** @description Stable UUID for syncing */
            uuid?: string;
        };
        "models.MediaItemList": {
            details?: components["schemas"]["models.MediaItem-types_ListData"];
            /** @description 0 for internal db, otherwise external client/ProviderID */
            listOriginID?: number;
            listType?: components["schemas"]["types.ListType"];
            order?: components["schemas"]["models.ListItem"][];
            ownerID?: number;
        };
        /** @enum {string} */
        "models.MediaRole": ModelsMediaRole;
        "models.MediaSyncJob": {
            /** @description ID of the client to sync from */
            clientID?: number;
            /** @description Type of the client */
            clientType?: string;
            createdAt?: string;
            deletedAt?: string;
            /** @description Whether sync is enabled */
            enabled?: boolean;
            /** @description Sync filter criteria (stored as JSON) */
            filters?: string;
            /** @description Sync frequency */
            frequency?: string;
            /** @description Internal ID */
            id?: number;
            /** @description Last sync time */
            lastSyncTime?: string;
            /** @description Type of media to sync (movies, series, music, etc.) */
            mediaType?: string;
            updatedAt?: string;
            /** @description ID of the user */
            userID?: number;
        };
        "models.Person": {
            biography?: string;
            birthplace?: string;
            createdAt?: string;
            dateOfBirth?: string;
            dateOfDeath?: string;
            deletedAt?: string;
            externalIDs?: components["schemas"]["models.ExternalID"][];
            gender?: string;
            /** @description Internal ID */
            id?: number;
            /** @description Professional information */
            knownFor?: string;
            /** @description Additional metadata */
            metadata?: components["schemas"]["models.PersonMetadata"];
            name?: string;
            /** @description Biographical information */
            photo?: string;
            popularity?: number;
            updatedAt?: string;
        };
        "models.PersonCreditsByRole": {
            /** @description Credits is a map of credits grouped by role */
            credits?: {
                [key: string]: components["schemas"]["models.Credit"][];
            };
            person?: components["schemas"]["models.Person"];
        };
        "models.PersonMetadata": {
            alternateNames?: string[];
            awards?: components["schemas"]["models.Award"][];
            externalLinks?: components["schemas"]["models.ExternalLink"][];
            socialMedia?: components["schemas"]["models.SocialMedia"];
            tags?: string[];
        };
        "models.PersonWithCredits": {
            biography?: string;
            birthplace?: string;
            createdAt?: string;
            credits?: components["schemas"]["models.Credit"][];
            dateOfBirth?: string;
            dateOfDeath?: string;
            deletedAt?: string;
            externalIDs?: components["schemas"]["models.ExternalID"][];
            gender?: string;
            /** @description Internal ID */
            id?: number;
            /** @description Professional information */
            knownFor?: string;
            /** @description Additional metadata */
            metadata?: components["schemas"]["models.PersonMetadata"];
            name?: string;
            /** @description Biographical information */
            photo?: string;
            popularity?: number;
            updatedAt?: string;
        };
        "models.PrivacySettings": {
            /** @example true */
            publicProfile?: boolean;
            /** @example true */
            shareRecommendations?: boolean;
            /** @example true */
            showRecommendationList?: boolean;
            /** @example true */
            showWatchHistory?: boolean;
        };
        /** @description Media recommendation stored in the database */
        "models.Recommendation": {
            /** @description Whether this is an active recommendation */
            active?: boolean;
            /** @description AI model used if recommendedBy="AI" */
            aiModel?: string;
            /** @description Confidence score (0.0 to 1.0) if available */
            confidence?: number;
            createdAt?: string;
            deletedAt?: string;
            /** @description Whether this item has been dismissed by the user */
            dismissed?: boolean;
            /** @description When this recommendation expires */
            expiresAt?: string;
            externalIDs?: components["schemas"]["models.ExternalIDMap"];
            genres?: string[];
            /** @description Internal ID */
            id?: number;
            /** @description Whether this item is present in the user's library */
            inLibrary?: boolean;
            /** @description Whether user has viewed this item */
            isViewed?: boolean;
            /** @description Job run that created this recommendation */
            jobRunID?: number;
            matchesActors?: string[];
            matchesDirectors?: string[];
            matchesGenres?: string[];
            mediaItemID?: number;
            /** @description "movie", "series", "music" */
            mediaType?: components["schemas"]["types.MediaType"];
            /** @description Additional metadata (stored as JSON) */
            metadata?: string;
            reasoning?: string;
            /** @description "AI", "popular", "similar_users" */
            recommendedBy?: string;
            similarItems?: string[];
            /** @description Source of the recommendation (AI, system, manual) */
            source?: components["schemas"]["models.RecommendationSource"];
            /** @description ID of the client that generated this recommendation, if applicable */
            sourceClientID?: number;
            /** @description Type of the client that generated this recommendation */
            sourceClientType?: string;
            title?: string;
            updatedAt?: string;
            userID?: number;
            /** @description If user has rated this recommendation */
            userRating?: number;
            year?: number;
        };
        /** @enum {string} */
        "models.RecommendationSource": ModelsRecommendationSource;
        "models.SocialLinks": {
            /** @example https://last.fm/user/faiyt */
            lastfm?: string;
            /** @example https://letterboxd.com/faiyt */
            letterboxd?: string;
            /** @example https://trakt.tv/users/faiyt */
            trakt?: string;
        };
        "models.SocialMedia": {
            facebook?: string;
            instagram?: string;
            twitter?: string;
            website?: string;
        };
        "models.SyncClient": {
            /** @description ID of the client that this external ID belongs to (optional for service IDs like TMDB) */
            clientID?: number;
            /** @description Type of client this ID belongs to (optional for service IDs) */
            clientType?: components["schemas"]["types.ClientType"];
            /** @description The actual ID value in the external system */
            itemID?: string;
        };
        /** @description User-specific configuration stored in the database */
        "models.UserConfig": {
            /**
             * @description Activity Analysis Settings
             * @example true
             */
            activityAnalysisEnabled?: boolean;
            /**
             * @description AI Algorithm Settings
             * @example serious
             * @enum {string}
             */
            aiChatPersonality?: ModelsUserConfigAiChatPersonality;
            /** @description AI Model Preferences */
            aiModelPreferences?: components["schemas"]["models.AIModelPreferences"];
            /**
             * @description Profile settings
             * @example I'm a developer
             */
            bio?: string;
            /**
             * @description Content Availability Settings
             * @example true
             */
            contentAvailabilityEnabled?: boolean;
            /**
             * @description What sidebar options to show based on the enabled content types.
             * @example movie,series,tv
             */
            contentTypes?: string;
            createdAt?: string;
            defaultClients?: components["schemas"]["models.DefaultClients"];
            deletedAt?: string;
            /**
             * @example weekly
             * @enum {string}
             */
            digestFrequency?: ModelsUserConfigDigestFrequency;
            /**
             * @description Emphasize new content discovery
             * @example true
             */
            discoveryModeEnabled?: boolean;
            /** @example 0.5 */
            discoveryModeRatio?: number;
            /** @example John Doe */
            displayName?: string;
            /** @example true */
            emailNotifications?: boolean;
            /** @example true */
            enableAnimations?: boolean;
            excludedGenres?: components["schemas"]["models.Genres"];
            /** @example war,violence,politics */
            excludedKeywords?: string;
            /** @description Internal ID */
            id?: number;
            /** @example false */
            includeUnratedContent?: boolean;
            /** @example 20 */
            itemsPerPage?: number;
            /** @example en-US */
            language?: string;
            /** @example R */
            maxContentRating?: string;
            /** @example 10 */
            maxNotificationsPerDay?: number;
            /** @description how many movie recommendations to generate */
            maxRecommendations?: components["schemas"]["models.MaxRecommendations"];
            /** @example PG-13 */
            minContentRating?: string;
            /** @example 0.7 */
            newContentWeight?: number;
            /** @example movie,series,music */
            newReleaseMediaTypes?: string;
            /**
             * @description New Release Notifications Settings
             * @example true
             */
            newReleaseNotificationsEnabled?: boolean;
            /**
             * @description Notification Settings
             * @example true
             */
            notificationsEnabled?: boolean;
            /** @example movie,series,music */
            notifyMediaTypes?: string;
            /** @example true */
            notifyOnNewRecommendations?: boolean;
            /** @example false */
            notifyOnSync?: boolean;
            /** @example 5 */
            notifyRatingThreshold?: number;
            /** @example true */
            notifyRecentReleases?: boolean;
            /** @example true */
            notifyUpcomingReleases?: boolean;
            /**
             * @description Onboarding
             * @example true
             */
            onboardingCompleted?: boolean;
            /** @example 0.8 */
            personalHistoryWeight?: number;
            /** @example bidirectional */
            playlistSyncDirection?: string;
            /**
             * @description Playlist Sync Settings
             * @example true
             */
            playlistSyncEnabled?: boolean;
            /** @example 0.3 */
            popularityWeight?: number;
            /** @example en,ja */
            preferredAudioLanguages?: string;
            /**
             * @example short
             * @enum {string}
             */
            preferredContentLength?: ModelsUserConfigPreferredContentLength;
            preferredGenres?: components["schemas"]["models.Genres"];
            privacySettings?: components["schemas"]["models.PrivacySettings"];
            /**
             * @description What content types with be part of the auto sync recommendations
             * @example movie,series,tv,book
             */
            recommendationContentTypes?: string;
            /** @example false */
            recommendationIncludeSimilar?: boolean;
            /** @example false */
            recommendationIncludeWatched?: boolean;
            /**
             * @description Prefux to add to teh beginning of the list name to identify that its part of the auto recommendations system
             * @example AI Picks
             */
            recommendationListPrefix?: string;
            /**
             * @description In years, 0 = no limit
             * @example 5
             */
            recommendationMaxAge?: number;
            /** @example 6 */
            recommendationMinRating?: number;
            /**
             * @example popular
             * @enum {string}
             */
            recommendationStrategy?: ModelsUserConfigRecommendationStrategy;
            /**
             * @description Recommendation Preferences
             *     Automatically download and organized recommended media into a collection/playlist
             * @example true
             */
            recommendationSyncEnabled?: boolean;
            /**
             * @description How often to sync new recommendations
             * @example daily
             * @enum {string}
             */
            recommendationSyncFrequency?: ModelsUserConfigRecommendationSyncFrequency;
            /**
             * @description What type of list to create for the synced recommendations
             * @example playlist
             * @enum {string}
             */
            recommendationSyncListType?: ModelsUserConfigRecommendationSyncListType;
            /** @example false */
            showAdultContent?: boolean;
            /**
             * @description Smart Collections Settings
             * @example true
             */
            smartCollectionsEnabled?: boolean;
            socialLinks?: components["schemas"]["models.SocialLinks"];
            /**
             * @description UI Preferences
             * @example dark
             * @enum {string}
             */
            theme?: ModelsUserConfigTheme;
            updatedAt?: string;
            /** @description UserID links this config to a specific user */
            userId?: number;
        };
        "models.UserMediaItemData-types_MediaData": {
            completed?: boolean;
            createdAt?: string;
            durationSeconds?: number;
            id?: number;
            isDisliked?: boolean;
            isFavorite?: boolean;
            /** @description Not stored in DB, loaded via relationship */
            item?: components["schemas"]["models.MediaItem-types_MediaData"];
            lastPlayedAt?: string;
            /** @description Foreign key to MediaItem */
            mediaItemId?: number;
            playCount?: number;
            playedAt?: string;
            playedPercentage?: number;
            positionSeconds?: number;
            /** @description "movie", "episode", "show", "season" */
            type?: components["schemas"]["types.MediaType"];
            updatedAt?: string;
            /** @description Foreign key to User */
            userId?: number;
            userRating?: number;
            /** @description Stable UUID for syncing */
            uuid?: string;
            watchlist?: boolean;
        };
        "models.UserMediaItemData-types_Series": {
            completed?: boolean;
            createdAt?: string;
            durationSeconds?: number;
            id?: number;
            isDisliked?: boolean;
            isFavorite?: boolean;
            /** @description Not stored in DB, loaded via relationship */
            item?: components["schemas"]["models.MediaItem-types_Series"];
            lastPlayedAt?: string;
            /** @description Foreign key to MediaItem */
            mediaItemId?: number;
            playCount?: number;
            playedAt?: string;
            playedPercentage?: number;
            positionSeconds?: number;
            /** @description "movie", "episode", "show", "season" */
            type?: components["schemas"]["types.MediaType"];
            updatedAt?: string;
            /** @description Foreign key to User */
            userId?: number;
            userRating?: number;
            /** @description Stable UUID for syncing */
            uuid?: string;
            watchlist?: boolean;
        };
        "requests.AddMediaRequest": {
            /** @description For Lidarr */
            metadataProfileID?: number;
            monitored?: boolean;
            /** @description For Lidarr (music) */
            musicBrainzID?: string;
            path?: string;
            qualityProfileID?: number;
            /** @description Whether to search for the media after adding */
            searchForMedia?: boolean;
            tags?: number[];
            title?: string;
            /** @description For Radarr (movies) */
            tmdbid?: number;
            /** @description For Sonarr (TV shows) */
            tvdbid?: number;
            year?: number;
        };
        /** @description Request for AI-powered content analysis */
        "requests.AiContentAnalysisRequest": {
            /** @description Client ID to use for the conversation */
            clientID?: number;
            /** @description Specific AI client type to use (claude, openai, ollama)
             *     example: claude */
            clientType?: string;
            /** @description The content to analyze
             *     required: true
             *     example: This is a sample text that needs analysis for sentiment and themes. */
            content: string;
            /** @description Type of content being analyzed (text, movie, etc)
             *     required: true
             *     example: text */
            contentType: string;
            /** @description Optional analysis options
             *     example: {"includeThemes": true, "includeSentiment": true} */
            options?: {
                [key: string]: unknown;
            };
        };
        /** @description Request for AI-powered content recommendations */
        "requests.AiRecommendationRequest": {
            /** @description Client ID to use for the conversation */
            clientID?: number;
            /** @description Specific AI client type to use (claude, openai, ollama)
             *     example: claude */
            clientType?: string;
            /** @description Type of content to recommend (movie, tv, music, etc)
             *     required: true
             *     example: movie */
            contentType: string;
            /** @description Number of recommendations to return
             *     example: 5 */
            count?: number;
            /** @description Optional filters to apply to recommendations
             *     example: {"genre": "sci-fi", "year": "2020-2023"} */
            filters?: {
                [key: string]: unknown;
            };
        };
        "requests.AutomationExecuteCommandRequest": {
            command: string;
            parameters?: {
                [key: string]: unknown;
            };
        };
        /** @description Response data after avatar upload */
        "requests.AvatarUploadResponse": {
            /**
             * @description FilePath is the path to the uploaded avatar file
             *     	@Description	Path to the uploaded avatar file
             *     	@Example		"/uploads/avatars/user_1.jpg"
             * @example /uploads/avatars/user_1.jpg
             */
            filePath?: string;
        };
        /** @description Request payload for changing user password */
        "requests.ChangePasswordRequest": {
            /**
             * @description CurrentPassword is the user's existing password for verification
             *     	@Description	User's current password for verification
             *     	@Example		"oldpassword123"
             * @example oldpassword123
             */
            currentPassword: string;
            /**
             * @description NewPassword is the password to change to
             *     	@Description	New password to set for the user
             *     	@Example		"newpassword456"
             * @example newpassword456
             */
            newPassword: string;
        };
        /** @description Request payload for changing user role */
        "requests.ChangeRoleRequest": {
            /**
             * @description Role is the new role to assign to the user
             *     	@Description	New role to assign to the user
             *     	@Enum			"user" "admin"
             *     	@Example		"admin"
             * @example admin
             * @enum {string}
             */
            role: RequestsChangeRoleRequestRole;
        };
        "requests.ClientRequest-types_ClientConfig": {
            client?: unknown;
            clientID?: number;
            clientType: components["schemas"]["types.ClientType"];
            isEnabled?: boolean;
            name: string;
        };
        "requests.ClientTestRequest-client_ClientConfig": {
            client?: unknown;
            /** @enum {unknown} */
            clientType: RequestsClientTestRequestClient_ClientConfigClientType;
        };
        /** @description Request to send a message in an existing AI conversation */
        "requests.ConversationMessageRequest": {
            /** @description Client ID to use for the conversation */
            clientID?: number;
            /** @description Optional context information for this message
             *     example: {"includeRecommendations": true, "maxResults": 3} */
            context?: {
                [key: string]: unknown;
            };
            /** @description The conversation ID from a previous StartConversation call
             *     required: true
             *     example: conv-123-abcdef */
            conversationId: string;
            /** @description The user's message to the AI
             *     required: true
             *     example: I'm looking for sci-fi movies similar to Interstellar */
            message: string;
        };
        /** @description Request payload for creating a new credit */
        "requests.CreateCreditRequest": {
            /**
             * @description Character is the character's name (for acting roles)
             *     	@Description	Character's name (for acting roles)
             *     	@Example		"Forrest Gump"
             * @example Forrest Gump
             */
            character?: string;
            /**
             * @description Department is the department the person worked in
             *     	@Description	Department the person worked in
             *     	@Example		"Acting"
             * @example Acting
             */
            department?: components["schemas"]["models.MediaDepartment"];
            /**
             * @description IsArtist indicates if this is an artist credit
             *     	@Description	Indicates if this is an artist credit
             *     	@Example		false
             * @example false
             */
            isArtist?: boolean;
            /**
             * @description IsCast indicates if this is a cast credit
             *     	@Description	Indicates if this is a cast credit
             *     	@Example		true
             * @example true
             */
            isCast?: boolean;
            /**
             * @description IsCreator indicates if this is a creator credit
             *     	@Description	Indicates if this is a creator credit
             *     	@Example		false
             * @example false
             */
            isCreator?: boolean;
            /**
             * @description IsCrew indicates if this is a crew credit
             *     	@Description	Indicates if this is a crew credit
             *     	@Example		false
             * @example false
             */
            isCrew?: boolean;
            /**
             * @description IsGuest indicates if this is a guest credit
             *     	@Description	Indicates if this is a guest credit
             *     	@Example		false
             * @example false
             */
            isGuest?: boolean;
            /**
             * @description Job is the specific job the person had
             *     	@Description	Specific job the person had
             *     	@Example		"Lead Actor"
             * @example Lead Actor
             */
            job?: string;
            /**
             * @description MediaItemID is the ID of the media item
             *     	@Description	ID of the media item
             *     	@Example		2
             * @example 2
             */
            mediaItemId: number;
            /**
             * @description Name is the person's name for this credit
             *     	@Description	Person's name for this credit
             *     	@Example		"Tom Hanks"
             * @example Tom Hanks
             */
            name: string;
            /**
             * @description Order is the order of importance (lower means more important)
             *     	@Description	Order of importance (lower means more important)
             *     	@Example		1
             * @example 1
             */
            order?: number;
            /**
             * @description PersonID is the ID of the person
             *     	@Description	ID of the person
             *     	@Example		1
             * @example 1
             */
            personId: number;
            /**
             * @description Role is the person's role
             *     	@Description	Person's role
             *     	@Example		"Actor"
             * @example Actor
             */
            role?: components["schemas"]["models.MediaRole"];
        };
        /** @description Request payload for creating a new person */
        "requests.CreatePersonRequest": {
            /**
             * @description Biography is the person's biography
             *     	@Description	Person's biography
             *     	@Example		"Thomas Jeffrey Hanks is an American actor and filmmaker..."
             * @example Thomas Jeffrey Hanks is an American actor and filmmaker...
             */
            biography?: string;
            /**
             * @description Birthplace is the person's birthplace
             *     	@Description	Person's birthplace
             *     	@Example		"Concord, California, USA"
             * @example Concord, California, USA
             */
            birthplace?: string;
            /**
             * @description DateOfBirth is the person's date of birth
             *     	@Description	Person's date of birth in RFC3339 format
             *     	@Example		"1956-07-09T00:00:00Z"
             * @example 1956-07-09T00:00:00Z
             */
            dateOfBirth?: string;
            /**
             * @description DateOfDeath is the person's date of death (if applicable)
             *     	@Description	Person's date of death in RFC3339 format (if applicable)
             *     	@Example		"2056-07-09T00:00:00Z"
             * @example 2056-07-09T00:00:00Z
             */
            dateOfDeath?: string;
            /** @description ExternalIDs contains IDs from external services
             *     	@Description	IDs from external services */
            externalIds?: components["schemas"]["requests.ExternalIDRequest"][];
            /**
             * @description Gender is the person's gender
             *     	@Description	Person's gender
             *     	@Example		"Male"
             * @example Male
             */
            gender?: string;
            /**
             * @description KnownFor is what the person is primarily known for
             *     	@Description	What the person is primarily known for
             *     	@Example		"Actor"
             * @example Actor
             */
            knownFor?: string;
            /**
             * @description Name is the person's name
             *     	@Description	Person's name
             *     	@Example		"Tom Hanks"
             * @example Tom Hanks
             */
            name: string;
            /**
             * @description Photo is the URL or path to the person's photo
             *     	@Description	URL or path to the person's photo
             *     	@Example		"https://example.com/photos/tom-hanks.jpg"
             * @example https://example.com/photos/tom-hanks.jpg
             */
            photo?: string;
        };
        "requests.CreateTagRequest": {
            name: string;
        };
        /** @description External ID for a person */
        "requests.ExternalIDRequest": {
            /**
             * @description ID is the identifier in the external service
             *     	@Description	Identifier in the external service
             *     	@Example		"31"
             * @example 31
             */
            id: string;
            /**
             * @description Source is the name of the external service
             *     	@Description	Name of the external service
             *     	@Example		"TMDB"
             * @example TMDB
             */
            source: string;
        };
        "requests.ForgotPasswordRequest": {
            /**
             * @description Email is the user's email address
             *     	@Description	User's email address
             *     	@Example		"user@example.com"
             * @example user@example.com
             */
            email: string;
        };
        /** @description Request payload for importing a person from an external source */
        "requests.ImportPersonRequest": {
            /**
             * @description ExternalID is the identifier in the external service
             *     	@Description	Identifier in the external service
             *     	@Example		"31"
             * @example 31
             */
            externalId: string;
            /** @description PersonData contains the person data to import
             *     	@Description	Person data to import */
            personData: components["schemas"]["requests.CreatePersonRequest"];
            /**
             * @description Source is the name of the external service
             *     	@Description	Name of the external service
             *     	@Example		"TMDB"
             * @example TMDB
             */
            source: string;
        };
        "requests.ListAddTrackRequest": {
            trackID?: number;
        };
        "requests.ListCreateRequest": {
            description?: string;
            duration?: number;
            genre?: string;
            isPublic?: boolean;
            isSmart?: boolean;
            name?: string;
            rating?: number;
            type?: components["schemas"]["requests.ListType"];
            year?: number;
        };
        "requests.ListReorderRequest": {
            itemIDs?: number[];
        };
        /** @enum {string} */
        "requests.ListType": RequestsListType;
        "requests.ListUpdateRequest": {
            description?: string;
            isPublic?: boolean;
            name?: string;
        };
        /** @description Request payload for user login */
        "requests.LoginRequest": {
            /**
             * @description Email is the user's email address
             *     	@Description	User's email address
             *     	@Example		"user@example.com"
             * @example user@example.com
             */
            email: string;
            /** @description Password is the user's chosen password
             *     	@Description	User's password (plain text in request) */
            password: string;
        };
        /** @description Request payload for user logout */
        "requests.LogoutRequest": {
            /** @description RefreshToken identifies the session to terminate
             *     	@Description	JWT refresh token to invalidate */
            refreshToken: string;
        };
        "requests.MarkRecommendationAsViewedRequest": {
            /** @example 123 */
            recommendationId: number;
        };
        "requests.MediaItemCreateRequest": {
            data: components["schemas"]["requests.MediaItemData"];
            type: string;
        };
        "requests.MediaItemData": {
            /** @description Album data */
            albumTitle?: string;
            /** @description Artist data */
            artistName?: string;
            /** @description Collection data */
            collectionName?: string;
            episodeNumber?: number;
            /** @description Base data */
            id?: number;
            releaseYear?: number;
            /** @description Episode data */
            seasonNumber?: number;
            /** @description Movie data */
            title?: string;
            /** @description Series data */
            titles?: string[];
            /** @description Track data */
            trackNumber?: number;
        };
        "requests.MediaItemUpdateRequest": {
            data: components["schemas"]["requests.MediaItemData"];
            type: string;
        };
        "requests.RateRecommendationRequest": {
            /** @example 4.5 */
            rating: number;
            /** @example 123 */
            recommendationId: number;
        };
        /** @description Request payload for refreshing access tokens */
        "requests.RefreshTokenRequest": {
            /** @description RefreshToken is used to generate a new access token
             *     	@Description	JWT refresh token to use for generating new access token */
            refreshToken: string;
        };
        /** @description Request payload for user registration */
        "requests.RegisterRequest": {
            /**
             * @description Email is the user's email address
             *     	@Description	User's email address
             *     	@Example		"user@example.com"
             * @example user@example.com
             */
            email: string;
            /** @description Password is the user's chosen password
             *     	@Description	User's password (plain text in request) */
            password: string;
            /**
             * @description Username is the user's desired username
             *     	@Description	User's chosen username
             *     	@Example		"johndoe"
             * @example johndoe
             */
            username: string;
        };
        "requests.ResetPasswordRequest": {
            /**
             * @description Email is the user's email address
             *     	@Description	User's email address
             *     	@Example		"user@example.com"
             * @example user@example.com
             */
            email: string;
            /**
             * @description NewPassword is the new password to set for the user
             *     	@Description	New password to set for the user
             *     	@Example		"newpassword456"
             * @example newpassword456
             */
            newPassword: string;
            /**
             * @description Token is the password reset token
             *     	@Description	Password reset token
             *     	@Example		"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
             */
            token: string;
        };
        "requests.RunMediaSyncJobRequest": {
            clientID: number;
            mediaType: string;
        };
        "requests.SetupMediaSyncJobRequest": {
            clientID: number;
            clientType: string;
            frequency: string;
            mediaType: string;
        };
        /** @description Request to start a new AI-powered conversation for recommendations */
        "requests.StartConversationRequest": {
            /** @description Client ID to use for the conversation */
            clientID?: number;
            /** @description Type of content to discuss (movie, tv, music, etc)
             *     required: true
             *     example: movie */
            contentType: string;
            /** @description Optional user preferences to initialize the conversation
             *     example: {"favoriteGenres": ["sci-fi", "thriller"], "recentlyWatched": ["Inception", "Tenet"]} */
            preferences?: {
                [key: string]: unknown;
            };
            /** @description Optional custom system instructions
             *     example: You are a helpful movie recommendation assistant */
            systemInstructions?: string;
        };
        /** @description Request payload for updating an existing credit */
        "requests.UpdateCreditRequest": {
            /**
             * @description Character is the character's name (for acting roles)
             *     	@Description	Character's name (for acting roles)
             *     	@Example		"Forrest Gump"
             * @example Forrest Gump
             */
            character?: string;
            /**
             * @description Department is the department the person worked in
             *     	@Description	Department the person worked in
             *     	@Example		"Acting"
             * @example Acting
             */
            department?: components["schemas"]["models.MediaDepartment"];
            /**
             * @description IsArtist indicates if this is an artist credit
             *     	@Description	Indicates if this is an artist credit
             *     	@Example		false
             * @example false
             */
            isArtist?: boolean;
            /**
             * @description IsCast indicates if this is a cast credit
             *     	@Description	Indicates if this is a cast credit
             *     	@Example		true
             * @example true
             */
            isCast?: boolean;
            /**
             * @description IsCreator indicates if this is a creator credit
             *     	@Description	Indicates if this is a creator credit
             *     	@Example		false
             * @example false
             */
            isCreator?: boolean;
            /**
             * @description IsCrew indicates if this is a crew credit
             *     	@Description	Indicates if this is a crew credit
             *     	@Example		false
             * @example false
             */
            isCrew?: boolean;
            /**
             * @description IsGuest indicates if this is a guest credit
             *     	@Description	Indicates if this is a guest credit
             *     	@Example		false
             * @example false
             */
            isGuest?: boolean;
            /**
             * @description Job is the specific job the person had
             *     	@Description	Specific job the person had
             *     	@Example		"Lead Actor"
             * @example Lead Actor
             */
            job?: string;
            /**
             * @description MediaItemID is the ID of the media item
             *     	@Description	ID of the media item
             *     	@Example		2
             * @example 2
             */
            mediaItemId?: number;
            /**
             * @description Name is the person's name for this credit
             *     	@Description	Person's name for this credit
             *     	@Example		"Tom Hanks"
             * @example Tom Hanks
             */
            name?: string;
            /**
             * @description Order is the order of importance (lower means more important)
             *     	@Description	Order of importance (lower means more important)
             *     	@Example		1
             * @example 1
             */
            order?: number;
            /**
             * @description PersonID is the ID of the person
             *     	@Description	ID of the person
             *     	@Example		1
             * @example 1
             */
            personId?: number;
            /**
             * @description Role is the person's role
             *     	@Description	Person's role
             *     	@Example		"Actor"
             * @example Actor
             */
            role?: components["schemas"]["models.MediaRole"];
        };
        "requests.UpdateJobScheduleRequest": {
            enabled?: boolean;
            frequency: string;
            jobName: string;
        };
        "requests.UpdateMediaRequest": {
            /** @description For Lidarr */
            metadataProfileID?: number;
            monitored?: boolean;
            path?: string;
            qualityProfileID?: number;
            tags?: number[];
        };
        /** @description Request payload for updating an existing person */
        "requests.UpdatePersonRequest": {
            /**
             * @description Biography is the person's biography
             *     	@Description	Person's biography
             *     	@Example		"Thomas Jeffrey Hanks is an American actor and filmmaker..."
             * @example Thomas Jeffrey Hanks is an American actor and filmmaker...
             */
            biography?: string;
            /**
             * @description Birthplace is the person's birthplace
             *     	@Description	Person's birthplace
             *     	@Example		"Concord, California, USA"
             * @example Concord, California, USA
             */
            birthplace?: string;
            /**
             * @description DateOfBirth is the person's date of birth
             *     	@Description	Person's date of birth in RFC3339 format
             *     	@Example		"1956-07-09T00:00:00Z"
             * @example 1956-07-09T00:00:00Z
             */
            dateOfBirth?: string;
            /**
             * @description DateOfDeath is the person's date of death (if applicable)
             *     	@Description	Person's date of death in RFC3339 format (if applicable)
             *     	@Example		"2056-07-09T00:00:00Z"
             * @example 2056-07-09T00:00:00Z
             */
            dateOfDeath?: string;
            /** @description ExternalIDs contains IDs from external services
             *     	@Description	IDs from external services */
            externalIds?: components["schemas"]["requests.ExternalIDRequest"][];
            /**
             * @description Gender is the person's gender
             *     	@Description	Person's gender
             *     	@Example		"Male"
             * @example Male
             */
            gender?: string;
            /**
             * @description KnownFor is what the person is primarily known for
             *     	@Description	What the person is primarily known for
             *     	@Example		"Actor"
             * @example Actor
             */
            knownFor?: string;
            /**
             * @description Name is the person's name
             *     	@Description	Person's name
             *     	@Example		"Tom Hanks"
             * @example Tom Hanks
             */
            name?: string;
            /**
             * @description Photo is the URL or path to the person's photo
             *     	@Description	URL or path to the person's photo
             *     	@Example		"https://example.com/photos/tom-hanks.jpg"
             * @example https://example.com/photos/tom-hanks.jpg
             */
            photo?: string;
        };
        "requests.UpdateRecommendationViewedRequest": {
            viewed?: boolean;
        };
        /** @description Request payload for updating user profile */
        "requests.UpdateUserRequest": {
            /**
             * @description Avatar is the path to the user's avatar image
             *     	@Description	Path to the user's avatar image
             *     	@Example		"/uploads/avatars/user_1.jpg"
             * @example /uploads/avatars/user_1.jpg
             */
            avatar?: string;
            /**
             * @description Email is the new email address
             *     	@Description	Updated email address for the user
             *     	@Example		"newemail@example.com"
             * @example newemail@example.com
             */
            email?: string;
            /**
             * @description Username is the new username
             *     	@Description	Updated username for the user
             *     	@Example		"newusername"
             * @example newusername
             */
            username?: string;
        };
        /** @description Request payload for recording a new play history entry */
        "requests.UserMediaItemDataRequest": {
            completed?: boolean;
            /** @description If this is a continuation of a previous play */
            continued?: boolean;
            durationSeconds?: number;
            isFavorite?: boolean;
            mediaItemID: number;
            playedPercentage?: number;
            positionSeconds?: number;
            type: components["schemas"]["types.MediaType"];
            userID: number;
            userRating?: number;
        };
        /** @description Request payload for synchronizing media item data */
        "requests.UserMediaItemDataSyncRequest": {
            completed?: boolean;
            /** @description If this is a continuation of a previous play */
            continued?: boolean;
            durationSeconds?: number;
            isFavorite?: boolean;
            mediaItemID: number;
            playedPercentage?: number;
            positionSeconds?: number;
            type: components["schemas"]["types.MediaType"];
            userID: number;
            userRating?: number;
        };
        "requests.UserMediaItemDataUpdateRequest": {
            completed?: boolean;
            /** @description If this is a continuation of a previous play */
            continued?: boolean;
            durationSeconds?: number;
            isFavorite?: boolean;
            mediaItemID: number;
            playedPercentage?: number;
            positionSeconds?: number;
            type: components["schemas"]["types.MediaType"];
            userID: number;
            userRating?: number;
        };
        "responses.APIResponse-any": {
            data?: unknown;
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-array_models_Client-types_ClientConfig": {
            data?: components["schemas"]["models.Client-types_ClientConfig"][];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-array_models_ClientList": {
            data?: components["schemas"]["models.ClientList"][];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-array_models_Credit": {
            data?: components["schemas"]["models.Credit"][];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-array_models_JobRun": {
            data?: components["schemas"]["models.JobRun"][];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-array_models_JobSchedule": {
            data?: components["schemas"]["models.JobSchedule"][];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-array_models_MediaItem-suasor_clients_media_types_Movie": {
            data?: components["schemas"]["models.MediaItem-suasor_clients_media_types_Movie"][];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-array_models_MediaItem-types_Album": {
            data?: components["schemas"]["models.MediaItem-types_Album"][];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-array_models_MediaItem-types_Artist": {
            data?: components["schemas"]["models.MediaItem-types_Artist"][];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-array_models_MediaItem-types_Episode": {
            data?: components["schemas"]["models.MediaItem-types_Episode"][];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-array_models_MediaItem-types_ListData": {
            data?: components["schemas"]["models.MediaItem-types_ListData"][];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-array_models_MediaItem-types_MediaData": {
            data?: components["schemas"]["models.MediaItem-types_MediaData"][];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-array_models_MediaItem-types_Series": {
            data?: components["schemas"]["models.MediaItem-types_Series"][];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-array_models_MediaItem-types_Track": {
            data?: components["schemas"]["models.MediaItem-types_Track"][];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-array_models_MediaSyncJob": {
            data?: components["schemas"]["models.MediaSyncJob"][];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-array_models_Person": {
            data?: components["schemas"]["models.Person"][];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-array_models_Recommendation": {
            data?: components["schemas"]["models.Recommendation"][];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-array_models_UserMediaItemData-types_MediaData": {
            data?: components["schemas"]["models.UserMediaItemData-types_MediaData"][];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-array_responses_MediaItemResponse": {
            data?: components["schemas"]["responses.MediaItemResponse"][];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-array_types_Episode": {
            data?: components["schemas"]["types.Episode"][];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-array_types_Season": {
            data?: components["schemas"]["types.Season"][];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-array_types_Series": {
            data?: components["schemas"]["types.Series"][];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-bool": {
            data?: boolean;
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-map_string_array_models_MediaItem-types_MediaData": {
            data?: components["schemas"]["map_string_array_models.MediaItem-types_MediaData"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-models_Client-types_ClientConfig": {
            data?: components["schemas"]["models.Client-types_ClientConfig"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-models_Credit": {
            data?: components["schemas"]["models.Credit"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-models_JobRun": {
            data?: components["schemas"]["models.JobRun"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-models_JobSchedule": {
            data?: components["schemas"]["models.JobSchedule"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-models_MediaItem-suasor_clients_media_types_Movie": {
            data?: components["schemas"]["models.MediaItem-suasor_clients_media_types_Movie"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-models_MediaItem-types_Album": {
            data?: components["schemas"]["models.MediaItem-types_Album"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-models_MediaItem-types_Artist": {
            data?: components["schemas"]["models.MediaItem-types_Artist"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-models_MediaItem-types_ListData": {
            data?: components["schemas"]["models.MediaItem-types_ListData"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-models_MediaItem-types_MediaData": {
            data?: components["schemas"]["models.MediaItem-types_MediaData"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-models_MediaItem-types_Playlist": {
            data?: components["schemas"]["models.MediaItem-types_Playlist"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-models_MediaItem-types_Series": {
            data?: components["schemas"]["models.MediaItem-types_Series"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-models_MediaItem-types_Track": {
            data?: components["schemas"]["models.MediaItem-types_Track"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-models_MediaItemList": {
            data?: components["schemas"]["models.MediaItemList"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-models_Person": {
            data?: components["schemas"]["models.Person"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-models_PersonCreditsByRole": {
            data?: components["schemas"]["models.PersonCreditsByRole"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-models_PersonWithCredits": {
            data?: components["schemas"]["models.PersonWithCredits"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-models_UserConfig": {
            data?: components["schemas"]["models.UserConfig"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-models_UserMediaItemData-types_MediaData": {
            data?: components["schemas"]["models.UserMediaItemData-types_MediaData"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-requests_AvatarUploadResponse": {
            data?: components["schemas"]["requests.AvatarUploadResponse"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-responses_AiContentAnalysisResponse": {
            data?: components["schemas"]["responses.AiContentAnalysisResponse"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-responses_AiRecommendationResponse": {
            data?: components["schemas"]["responses.AiRecommendationResponse"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-responses_AuthDataResponse": {
            data?: components["schemas"]["responses.AuthDataResponse"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-responses_ConversationMessageResponse": {
            data?: components["schemas"]["responses.ConversationMessageResponse"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-responses_ConversationResponse": {
            data?: components["schemas"]["responses.ConversationResponse"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-responses_EmptyResponse": {
            data?: components["schemas"]["responses.EmptyResponse"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-responses_HealthResponse": {
            data?: components["schemas"]["responses.HealthResponse"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-responses_MediaItemResponse": {
            data?: components["schemas"]["responses.MediaItemResponse"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-responses_RecommendationResponse": {
            data?: components["schemas"]["responses.RecommendationResponse"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-responses_RecommendationsListResponse": {
            data?: components["schemas"]["responses.RecommendationsListResponse"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-responses_TestConnectionResponse": {
            data?: components["schemas"]["responses.TestConnectionResponse"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-responses_UserResponse": {
            data?: components["schemas"]["responses.UserResponse"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-types_Configuration": {
            data?: components["schemas"]["types.Configuration"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.APIResponse-types_MediaData": {
            data?: unknown;
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        /** @description Response containing AI-powered content analysis */
        "responses.AiContentAnalysisResponse": {
            /** @description Analysis results */
            analysis?: {
                [key: string]: unknown;
            };
        };
        /** @description Response containing AI-powered content recommendations */
        "responses.AiRecommendationResponse": {
            /** @description List of recommended items */
            items?: {
                [key: string]: unknown;
            }[];
        };
        /** @description Authentication data returned to client after successful authentication */
        "responses.AuthDataResponse": {
            /** @description AccessToken is the JWT token for API access
             *     	@Description	JWT access token for authenticated requests
             *     	@Example		"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." */
            accessToken?: string;
            /** @description ExpiresAt indicates when the access token expires
             *     	@Description	UNIX timestamp when the access token expires
             *     	@Example		1674140400 */
            expiresAt?: number;
            /** @description RefreshToken is used to get new access tokens
             *     	@Description	JWT refresh token for obtaining new access tokens
             *     	@Example		"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." */
            refreshToken?: string;
            /** @description User contains the user profile information
             *     	@Description	User profile data */
            user?: components["schemas"]["responses.UserResponse"];
        };
        "responses.AutomationExecuteCommandResponse": {
            data?: string;
            message?: string;
            success?: boolean;
        };
        /** @description Response to a message in an AI conversation */
        "responses.ConversationMessageResponse": {
            /** @description Additional message context
             *     example: {"sentiment": "positive", "topicShift": false} */
            context?: {
                [key: string]: unknown;
            };
            /** @description The AI's response to the user message
             *     example: "Based on your interest in Interstellar, I'd recommend checking out these sci-fi movies with similar themes of space exploration and time: 1. Arrival (2016), 2. The Martian (2015), 3. Ad Astra (2019). Would you like more recommendations or details about any of these?" */
            message?: string;
            /** @description Recommendations included in the response, if any
             *     example: [{"title": "Arrival", "year": 2016, "genre": "Sci-Fi"}, {"title": "The Martian", "year": 2015, "genre": "Sci-Fi"}] */
            recommendations?: {
                [key: string]: unknown;
            }[];
        };
        /** @description Response containing conversation details */
        "responses.ConversationResponse": {
            /** @description Additional information about the conversation context
             *     example: {"contentType": "movie", "session": "active"} */
            context?: {
                [key: string]: unknown;
            };
            /** @description Unique ID for the conversation
             *     example: conv-123-abcdef */
            conversationId?: string;
            /** @description Initial greeting or message from the AI
             *     example: "Hi there! I'm your movie recommendation assistant. What kind of movies do you enjoy watching?" */
            welcome?: string;
        };
        "responses.EmptyAPIResponse": {
            data?: unknown;
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.EmptyResponse": {
            success?: boolean;
        };
        "responses.ErrorDetails": {
            error?: string;
            metadata?: {
                [key: string]: unknown;
            };
            stackInfo?: string;
        };
        "responses.ErrorResponse-any": {
            details?: unknown;
            /** @example This is a pretty message */
            message?: string;
            request_id?: string;
            /** @example 201 */
            statusCode?: number;
            timestamp?: string;
            /** @example FAILED_CHECK */
            type?: components["schemas"]["errors.ErrorType"];
        };
        "responses.ErrorResponse-error": {
            details?: unknown;
            /** @example This is a pretty message */
            message?: string;
            request_id?: string;
            /** @example 201 */
            statusCode?: number;
            timestamp?: string;
            /** @example FAILED_CHECK */
            type?: components["schemas"]["errors.ErrorType"];
        };
        "responses.ErrorResponse-responses_ErrorDetails": {
            details?: components["schemas"]["responses.ErrorDetails"];
            /** @example This is a pretty message */
            message?: string;
            request_id?: string;
            /** @example 201 */
            statusCode?: number;
            timestamp?: string;
            /** @example FAILED_CHECK */
            type?: components["schemas"]["errors.ErrorType"];
        };
        "responses.HealthResponse": {
            /** @example true */
            application: boolean;
            /** @example true */
            database: boolean;
            /**
             * @description Overall status of the system
             * @example up
             * @enum {string}
             */
            status: ResponsesHealthResponseStatus;
        };
        "responses.MediaItemResponse": {
            clientID?: number;
            clientType?: string;
            createdAt?: string;
            data?: unknown;
            externalID?: string;
            id?: number;
            type?: components["schemas"]["types.MediaType"];
            updatedAt?: string;
        };
        "responses.RecentSearchHistoryItem": {
            id?: number;
            query?: string;
            resultCount?: number;
            searchedAt?: string;
        };
        "responses.RecentSearchesResponse": {
            searches?: components["schemas"]["responses.RecentSearchHistoryItem"][];
            success?: boolean;
        };
        "responses.RecommendationResponse": {
            aiModel?: string;
            createdAt?: string;
            externalIds?: {
                [key: string]: string;
            };
            genres?: string[];
            id?: number;
            isViewed?: boolean;
            matchesActors?: string[];
            matchesDirectors?: string[];
            matchesGenres?: string[];
            mediaType?: components["schemas"]["types.MediaType"];
            reasoning?: string;
            recommendedBy?: string;
            score?: number;
            similarItems?: string[];
            title?: string;
            userRating?: number;
            year?: number;
        };
        "responses.RecommendationsListResponse": {
            limit?: number;
            mediaType?: string;
            offset?: number;
            recommendations?: components["schemas"]["responses.RecommendationResponse"][];
            total?: number;
        };
        "responses.SearchResponse": {
            results?: components["schemas"]["responses.SearchResults"];
            success?: boolean;
        };
        "responses.SearchResults": {
            albums?: {
                createdAt?: string;
                /** @description Type-specific media data */
                data?: components["schemas"]["types.Album"];
                deletedAt?: string;
                downloadUrl?: string;
                /** @description External IDs for this item (TMDB, IMDB, etc.) */
                externalIds?: components["schemas"]["models.ExternalID"][];
                /** @description Internal ID */
                id?: number;
                /** @description Whether this item is public or not */
                isPublic?: boolean;
                /** @description ID of the user that owns this item, 0 for system owned items */
                ownerId?: number;
                releaseDate?: string;
                releaseYear?: number;
                streamUrl?: string;
                /** @description Client IDs for this item (mapping client to their IDs) */
                syncClients?: components["schemas"]["models.SyncClient"][];
                title?: string;
                /** @description Type of media (movie, show, episode, etc.) */
                type?: components["schemas"]["types.MediaType"];
                updatedAt?: string;
                /** @description Stable UUID for syncing */
                uuid?: string;
            }[];
            artists?: {
                createdAt?: string;
                /** @description Type-specific media data */
                data?: components["schemas"]["types.Artist"];
                deletedAt?: string;
                downloadUrl?: string;
                /** @description External IDs for this item (TMDB, IMDB, etc.) */
                externalIds?: components["schemas"]["models.ExternalID"][];
                /** @description Internal ID */
                id?: number;
                /** @description Whether this item is public or not */
                isPublic?: boolean;
                /** @description ID of the user that owns this item, 0 for system owned items */
                ownerId?: number;
                releaseDate?: string;
                releaseYear?: number;
                streamUrl?: string;
                /** @description Client IDs for this item (mapping client to their IDs) */
                syncClients?: components["schemas"]["models.SyncClient"][];
                title?: string;
                /** @description Type of media (movie, show, episode, etc.) */
                type?: components["schemas"]["types.MediaType"];
                updatedAt?: string;
                /** @description Stable UUID for syncing */
                uuid?: string;
            }[];
            collections?: {
                createdAt?: string;
                /** @description Type-specific media data */
                data?: components["schemas"]["suasor_clients_media_types.Collection"];
                deletedAt?: string;
                downloadUrl?: string;
                /** @description External IDs for this item (TMDB, IMDB, etc.) */
                externalIds?: components["schemas"]["models.ExternalID"][];
                /** @description Internal ID */
                id?: number;
                /** @description Whether this item is public or not */
                isPublic?: boolean;
                /** @description ID of the user that owns this item, 0 for system owned items */
                ownerId?: number;
                releaseDate?: string;
                releaseYear?: number;
                streamUrl?: string;
                /** @description Client IDs for this item (mapping client to their IDs) */
                syncClients?: components["schemas"]["models.SyncClient"][];
                title?: string;
                /** @description Type of media (movie, show, episode, etc.) */
                type?: components["schemas"]["types.MediaType"];
                updatedAt?: string;
                /** @description Stable UUID for syncing */
                uuid?: string;
            }[];
            episodes?: {
                createdAt?: string;
                /** @description Type-specific media data */
                data?: components["schemas"]["types.Episode"];
                deletedAt?: string;
                downloadUrl?: string;
                /** @description External IDs for this item (TMDB, IMDB, etc.) */
                externalIds?: components["schemas"]["models.ExternalID"][];
                /** @description Internal ID */
                id?: number;
                /** @description Whether this item is public or not */
                isPublic?: boolean;
                /** @description ID of the user that owns this item, 0 for system owned items */
                ownerId?: number;
                releaseDate?: string;
                releaseYear?: number;
                streamUrl?: string;
                /** @description Client IDs for this item (mapping client to their IDs) */
                syncClients?: components["schemas"]["models.SyncClient"][];
                title?: string;
                /** @description Type of media (movie, show, episode, etc.) */
                type?: components["schemas"]["types.MediaType"];
                updatedAt?: string;
                /** @description Stable UUID for syncing */
                uuid?: string;
            }[];
            movies?: {
                createdAt?: string;
                /** @description Type-specific media data */
                data?: components["schemas"]["suasor_clients_media_types.Movie"];
                deletedAt?: string;
                downloadUrl?: string;
                /** @description External IDs for this item (TMDB, IMDB, etc.) */
                externalIds?: components["schemas"]["models.ExternalID"][];
                /** @description Internal ID */
                id?: number;
                /** @description Whether this item is public or not */
                isPublic?: boolean;
                /** @description ID of the user that owns this item, 0 for system owned items */
                ownerId?: number;
                releaseDate?: string;
                releaseYear?: number;
                streamUrl?: string;
                /** @description Client IDs for this item (mapping client to their IDs) */
                syncClients?: components["schemas"]["models.SyncClient"][];
                title?: string;
                /** @description Type of media (movie, show, episode, etc.) */
                type?: components["schemas"]["types.MediaType"];
                updatedAt?: string;
                /** @description Stable UUID for syncing */
                uuid?: string;
            }[];
            people?: components["schemas"]["models.Person"][];
            playlists?: {
                createdAt?: string;
                /** @description Type-specific media data */
                data?: components["schemas"]["types.Playlist"];
                deletedAt?: string;
                downloadUrl?: string;
                /** @description External IDs for this item (TMDB, IMDB, etc.) */
                externalIds?: components["schemas"]["models.ExternalID"][];
                /** @description Internal ID */
                id?: number;
                /** @description Whether this item is public or not */
                isPublic?: boolean;
                /** @description ID of the user that owns this item, 0 for system owned items */
                ownerId?: number;
                releaseDate?: string;
                releaseYear?: number;
                streamUrl?: string;
                /** @description Client IDs for this item (mapping client to their IDs) */
                syncClients?: components["schemas"]["models.SyncClient"][];
                title?: string;
                /** @description Type of media (movie, show, episode, etc.) */
                type?: components["schemas"]["types.MediaType"];
                updatedAt?: string;
                /** @description Stable UUID for syncing */
                uuid?: string;
            }[];
            series?: {
                createdAt?: string;
                /** @description Type-specific media data */
                data?: components["schemas"]["types.Series"];
                deletedAt?: string;
                downloadUrl?: string;
                /** @description External IDs for this item (TMDB, IMDB, etc.) */
                externalIds?: components["schemas"]["models.ExternalID"][];
                /** @description Internal ID */
                id?: number;
                /** @description Whether this item is public or not */
                isPublic?: boolean;
                /** @description ID of the user that owns this item, 0 for system owned items */
                ownerId?: number;
                releaseDate?: string;
                releaseYear?: number;
                streamUrl?: string;
                /** @description Client IDs for this item (mapping client to their IDs) */
                syncClients?: components["schemas"]["models.SyncClient"][];
                title?: string;
                /** @description Type of media (movie, show, episode, etc.) */
                type?: components["schemas"]["types.MediaType"];
                updatedAt?: string;
                /** @description Stable UUID for syncing */
                uuid?: string;
            }[];
            totalCount?: number;
            tracks?: {
                createdAt?: string;
                /** @description Type-specific media data */
                data?: components["schemas"]["types.Track"];
                deletedAt?: string;
                downloadUrl?: string;
                /** @description External IDs for this item (TMDB, IMDB, etc.) */
                externalIds?: components["schemas"]["models.ExternalID"][];
                /** @description Internal ID */
                id?: number;
                /** @description Whether this item is public or not */
                isPublic?: boolean;
                /** @description ID of the user that owns this item, 0 for system owned items */
                ownerId?: number;
                releaseDate?: string;
                releaseYear?: number;
                streamUrl?: string;
                /** @description Client IDs for this item (mapping client to their IDs) */
                syncClients?: components["schemas"]["models.SyncClient"][];
                title?: string;
                /** @description Type of media (movie, show, episode, etc.) */
                type?: components["schemas"]["types.MediaType"];
                updatedAt?: string;
                /** @description Stable UUID for syncing */
                uuid?: string;
            }[];
        };
        "responses.SearchSuggestionsResponse": {
            success?: boolean;
            suggestions?: string[];
        };
        "responses.SuccessResponse": {
            data?: components["schemas"]["responses.EmptyResponse"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "responses.SystemStatusResponse": {
            status?: string;
        };
        "responses.TestConnectionResponse": {
            message?: string;
            success?: boolean;
            version?: string;
        };
        "responses.TrendingSearchItem": {
            query?: string;
            searchCount?: number;
        };
        "responses.TrendingSearchesResponse": {
            searches?: components["schemas"]["responses.TrendingSearchItem"][];
            success?: boolean;
        };
        /** @description User information returned in API responses */
        "responses.UserResponse": {
            /**
             * @description Avatar is the path to the user's avatar image
             *     	@Description	Path to the user's avatar image
             *     	@Example		"/uploads/avatars/user_1.jpg"
             * @example /uploads/avatars/user_1.jpg
             */
            avatar?: string;
            /** @description Email is the unique email address of the user
             *     	@Description	User's email address
             *     	@Example		"user@example.com" */
            email?: string;
            /** @description ID is the unique identifier for the user
             *     	@Description	User's unique identifier
             *     	@Example		1 */
            id?: number;
            /** @description Role defines the user's permission level
             *     	@Description	User's role in the system
             *     	@Enum			"user" "admin"
             *     	@Example		"user" */
            role?: string;
            /** @description Username is the display name chosen by the user
             *     	@Description	User's chosen username
             *     	@Example		"johndoe" */
            username?: string;
        };
        "suasor_clients_media_types.Collection": {
            autoUpdateTime?: string;
            details?: components["schemas"]["types.MediaDetails"];
            isPublic?: boolean;
            /** @description Smart lists */
            isSmart?: boolean;
            itemCount?: number;
            items?: components["schemas"]["types.ListItem"][];
            /** @description Track when and which client last modified this playlist */
            lastModified?: string;
            lastSynced?: string;
            /** @description client ID */
            modifiedBy?: number;
            owner?: number;
            /** @description ListCollaboratorIDs */
            sharedWith?: number[];
            smartCriteria?: {
                [key: string]: unknown;
            };
            syncClientStates?: components["schemas"]["types.SyncClientState"][];
        };
        "suasor_clients_media_types.ExternalID": {
            /** @description The actual ID */
            id?: string;
            /** @description e.g., "tmdb", "imdb", "trakt", "tvdb" */
            source?: string;
        };
        "suasor_clients_media_types.Movie": {
            audioCodec?: string;
            credits?: components["schemas"]["suasor_clients_media_types.Person"][];
            details?: components["schemas"]["types.MediaDetails"];
            /** @description e.g., "4K", "1080p" */
            resolution?: string;
            subtitleUrls?: string[];
            trailerUrl?: string;
            videoCodec?: string;
        };
        "suasor_clients_media_types.Person": {
            /** @description For actors */
            character?: string;
            isArtist?: boolean;
            isCast?: boolean;
            isCreator?: boolean;
            isCrew?: boolean;
            isGuest?: boolean;
            name?: string;
            photo?: string;
            /** @description e.g., "Director", "Actor" */
            role?: string;
        };
        "suasor_clients_media_types.Rating": {
            /** @description e.g., "tmdb", "imdb", "trakt", "tvdb" */
            source?: string;
            /** @description The actual ID */
            value?: number;
            /** @description For sources that might have how many people voted on an item */
            votes?: number;
        };
        "types.Album": {
            artistID?: number;
            artistName?: string;
            credits?: components["schemas"]["suasor_clients_media_types.Person"][];
            details?: components["schemas"]["types.MediaDetails"];
            syncArtist?: components["schemas"]["types.SyncClient"][];
            trackCount?: number;
            trackIDs?: number[];
            tracks?: components["schemas"]["types.Track"][];
        };
        "types.Artist": {
            albumCount?: number;
            albumIDs?: number[];
            albums?: components["schemas"]["types.Album"][];
            biography?: string;
            details?: components["schemas"]["types.MediaDetails"];
            similarArtists?: components["schemas"]["types.ArtistReference"][];
        };
        "types.ArtistReference": {
            id?: number;
            name?: string;
        };
        "types.Artwork": {
            background?: string;
            banner?: string;
            logo?: string;
            poster?: string;
            thumbnail?: string;
        };
        "types.ChangeRecord": {
            /** @description "add", "remove", "update", "reorder", "sync" */
            changeType?: string;
            /** @description 0 = internal client */
            clientID?: number;
            itemID?: string;
            timestamp?: string;
        };
        /** @enum {string} */
        "types.ClientCategory": TypesClientCategory;
        /** @enum {string} */
        "types.ClientType": TypesClientType;
        /** @description Complete application configuration settings */
        "types.Configuration": {
            /** @description App contains core application settings */
            app?: {
                /** @example http://localhost:8080 */
                apiBaseURL: string;
                /** @example http://localhost:3000 */
                appURL: string;
                /** @example ./uploads/avatars */
                avatarPath: string;
                /**
                 * @example development
                 * @enum {string}
                 */
                environment: TypesConfigurationAppEnvironment;
                /**
                 * @example info
                 * @enum {string}
                 */
                logLevel: TypesConfigurationAppLogLevel;
                /** @example 5242880 */
                maxAvatarSize: number;
                /** @example 100 */
                maxPageSize: number;
                /** @example suasor */
                name: string;
            };
            /** @description Auth contains authentication settings */
            auth?: {
                /**
                 * @description New fields to add
                 * @example 15
                 */
                accessExpiryMinutes: number;
                /** @example [
                 *       "http://localhost:3000"
                 *     ] */
                allowedOrigins?: string[];
                /** @example false */
                enable2FA?: boolean;
                /** @example true */
                enableLocal?: boolean;
                /** @example your-secret-key */
                jwtSecret: string;
                /** @example 7 */
                refreshExpiryDays: number;
                /** @example 60 */
                sessionTimeout: number;
                /** @example suasor-client */
                tokenAudience: string;
                /** @example 24 */
                tokenExpiration: number;
                /** @example suasor-api */
                tokenIssuer: string;
            };
            /** @description Database contains database connection settings */
            db?: {
                /** @example localhost */
                host: string;
                /** @example 20 */
                maxConns: number;
                /** @example suasor */
                name: string;
                /** @example yourpassword */
                password: string;
                /** @example 5432 */
                port: string;
                /** @example 30 */
                timeout: number;
                /** @example postgres_user */
                user: string;
            };
            /** @description HTTP contains HTTP server configuration */
            http?: {
                /** @example http://localhost:8080 */
                baseURL?: string;
                /** @example false */
                enableSSL?: boolean;
                /** @example 60 */
                idleTimeout: number;
                /** @example 8080 */
                port: string;
                /** @example false */
                proxyEnabled?: boolean;
                /** @example http://proxy:8080 */
                proxyURL?: string;
                /** @example true */
                rateLimitEnabled?: boolean;
                /** @example 30 */
                readTimeout: number;
                /** @example 100 */
                requestsPerMin?: number;
                /** @example /path/to/cert.pem */
                sslCert?: string;
                /** @example /path/to/key.pem */
                sslKey?: string;
                /** @example 30 */
                writeTimeout: number;
            };
        };
        "types.Episode": {
            credits?: components["schemas"]["suasor_clients_media_types.Person"][];
            details?: components["schemas"]["types.MediaDetails"];
            number?: number;
            seasonID?: number;
            seasonNumber?: number;
            showID?: number;
            showTitle?: string;
            syncSeason?: components["schemas"]["types.SyncClient"][];
            syncSeries?: components["schemas"]["types.SyncClient"][];
        };
        "types.ListItem": {
            changeHistory?: components["schemas"]["types.ChangeRecord"][];
            itemID?: number;
            lastChanged?: string;
            position?: number;
            type?: components["schemas"]["types.MediaType"];
        };
        /** @enum {string} */
        "types.ListType": TypesListType;
        "types.MediaDetails": {
            addedAt?: string;
            artwork?: components["schemas"]["types.Artwork"];
            contentRating?: string;
            description?: string;
            /** @description Changed from time.Duration to int64 for Swagger compatibility */
            durationSeconds?: number;
            externalIDs?: components["schemas"]["suasor_clients_media_types.ExternalID"][];
            genres?: string[];
            isFavorite?: boolean;
            language?: string;
            ratings?: components["schemas"]["suasor_clients_media_types.Rating"][];
            releaseDate?: string;
            releaseYear?: number;
            studios?: string[];
            tags?: string[];
            title?: string;
            updatedAt?: string;
            userRating?: number;
        };
        /** @enum {string} */
        "types.MediaType": TypesMediaType;
        "types.Playlist": {
            autoUpdateTime?: string;
            details?: components["schemas"]["types.MediaDetails"];
            isPublic?: boolean;
            /** @description Smart lists */
            isSmart?: boolean;
            itemCount?: number;
            items?: components["schemas"]["types.ListItem"][];
            /** @description Track when and which client last modified this playlist */
            lastModified?: string;
            lastSynced?: string;
            /** @description client ID */
            modifiedBy?: number;
            owner?: number;
            /** @description ListCollaboratorIDs */
            sharedWith?: number[];
            smartCriteria?: {
                [key: string]: unknown;
            };
            syncClientStates?: components["schemas"]["types.SyncClientState"][];
        };
        "types.Season": {
            artwork?: components["schemas"]["types.Artwork"];
            credits?: components["schemas"]["suasor_clients_media_types.Person"][];
            details?: components["schemas"]["types.MediaDetails"];
            episodeCount?: number;
            episodeIDs?: number[];
            episodes?: components["schemas"]["types.Episode"][];
            overview?: string;
            releaseDate?: string;
            seasonNumber?: number;
            seriesID?: number;
            seriesName?: string;
            syncSeries?: components["schemas"]["types.SyncClient"][];
            title?: string;
        };
        "types.Series": {
            contentRating?: string;
            credits?: components["schemas"]["suasor_clients_media_types.Person"][];
            details?: components["schemas"]["types.MediaDetails"];
            episodeCount?: number;
            genres?: string[];
            network?: string;
            rating?: number;
            releaseYear?: number;
            seasonCount?: number;
            seasons?: components["schemas"]["types.Season"][];
            /** @description e.g., "Ended", "Continuing" */
            status?: string;
        };
        "types.SyncClient": {
            /** @description ID of the client that this external ID belongs to (optional for service IDs like TMDB) */
            clientID?: number;
            /** @description The actual ID value in the external system */
            itemID?: string;
        };
        "types.SyncClientState": {
            clientID?: number;
            clientListID?: string;
            /** @description Integration Client's Internal IDs for the items */
            items?: components["schemas"]["types.SyncListItem"][];
            /** @description Time last synced to this client */
            lastSynced?: string;
        };
        "types.SyncListItem": {
            changeHistory?: components["schemas"]["types.ChangeRecord"][];
            itemID?: string;
            lastChanged?: string;
            position?: number;
        };
        "types.Track": {
            albumID?: number;
            albumName?: string;
            albumTitle?: string;
            artistID?: number;
            artistName?: string;
            composer?: string;
            credits?: components["schemas"]["suasor_clients_media_types.Person"][];
            details?: components["schemas"]["types.MediaDetails"];
            discNumber?: number;
            duration?: number;
            lyrics?: string;
            syncAlbum?: components["schemas"]["types.SyncClient"][];
            syncArtist?: components["schemas"]["types.SyncClient"][];
            trackNumber?: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: {
        /** @description Configuration data */
        "types.Configuration": {
            content: {
                "application/json": components["schemas"]["types.Configuration"];
            };
        };
        /** @description Media play information */
        "requests.UserMediaItemDataRequest": {
            content: {
                "application/json": components["schemas"]["requests.UserMediaItemDataRequest"];
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export enum ErrorsErrorType {
    ErrorTypeFailedCheck = "FAILED_CHECK",
    ErrorTypeUnauthorized = "UNAUTHORIZED",
    ErrorTypeNotFound = "NOT_FOUND",
    ErrorTypeBadRequest = "BAD_REQUEST",
    ErrorTypeInternalError = "INTERNAL_ERROR",
    ErrorTypeForbidden = "FORBIDDEN",
    ErrorTypeConflict = "CONFLICT",
    ErrorTypeValidation = "VALIDATION_ERROR",
    ErrorTypeRateLimited = "RATE_LIMITED",
    ErrorTypeTimeout = "TIMEOUT",
    ErrorTypeServiceUnavailable = "SERVICE_UNAVAILABLE",
    ErrorTypeUnprocessableEntity = "UNPROCESSABLE_ENTITY"
}
export enum ModelsJobStatus {
    JobStatusPending = "pending",
    JobStatusRunning = "running",
    JobStatusCompleted = "completed",
    JobStatusFailed = "failed"
}
export enum ModelsJobType {
    JobTypeRecommendation = "recommendation",
    JobTypeSync = "sync",
    JobTypeSystem = "system",
    JobTypeNotification = "notification",
    JobTypeAnalysis = "analysis"
}
export enum ModelsMediaDepartment {
    DepartmentCast = "Cast",
    DepartmentCrew = "Crew",
    DepartmentDirecting = "Directing",
    DepartmentWriting = "Writing",
    DepartmentProduction = "Production",
    DepartmentCamera = "Camera",
    DepartmentEditing = "Editing",
    DepartmentSound = "Sound",
    DepartmentArt = "Art",
    DepartmentOther = "Other"
}
export enum ModelsMediaRole {
    RoleActor = "Actor",
    RoleVoice = "Voice",
    RoleDirector = "Director",
    RoleWriter = "Writer",
    RoleScreenplay = "Screenplay",
    RoleStory = "Story",
    RoleProducer = "Producer",
    RoleExecutiveProducer = "Executive Producer",
    RoleOther = "Other"
}
export enum ModelsRecommendationSource {
    RecommendationSourceAI = "ai",
    RecommendationSourceSystem = "system",
    RecommendationSourceManual = "manual"
}
export enum ModelsUserConfigAiChatPersonality {
    friendly = "friendly",
    serious = "serious",
    enthusiastic = "enthusiastic",
    analytical = "analytical",
    custom = "custom"
}
export enum ModelsUserConfigDigestFrequency {
    never = "never",
    daily = "daily",
    weekly = "weekly"
}
export enum ModelsUserConfigPreferredContentLength {
    short = "short",
    medium = "medium",
    long = "long"
}
export enum ModelsUserConfigRecommendationStrategy {
    similar = "similar",
    recent = "recent",
    popular = "popular",
    balanced = "balanced"
}
export enum ModelsUserConfigRecommendationSyncFrequency {
    manual = "manual",
    daily = "daily",
    weekly = "weekly",
    monthly = "monthly"
}
export enum ModelsUserConfigRecommendationSyncListType {
    playlist = "playlist",
    collection = "collection"
}
export enum ModelsUserConfigTheme {
    light = "light",
    dark = "dark",
    system = "system"
}
export enum RequestsChangeRoleRequestRole {
    user = "user",
    admin = "admin"
}
export enum RequestsClientTestRequestClient_ClientConfigClientType {
    radarr = "radarr",
    sonarr = "sonarr",
    lidarr = "lidarr",
    emby = "emby",
    jellyfin = "jellyfin",
    subsonic = "subsonic",
    plex = "plex",
    claude = "claude",
    openai = "openai",
    ollama = "ollama"
}
export enum RequestsListType {
    ListTypePlaylist = "playlist",
    ListTypeCollection = "collection"
}
export enum ResponsesHealthResponseStatus {
    up = "up",
    down = "down",
    degraded = "degraded"
}
export enum TypesClientCategory {
    ClientCategoryAutomation = "automation",
    ClientCategoryMedia = "media",
    ClientCategoryAI = "ai",
    ClientCategoryMetadata = "metadata",
    ClientCategoryUnknown = "unknown"
}
export enum TypesClientType {
    ClientTypeEmby = "emby",
    ClientTypeJellyfin = "jellyfin",
    ClientTypePlex = "plex",
    ClientTypeSubsonic = "subsonic",
    ClientTypeRadarr = "radarr",
    ClientTypeSonarr = "sonarr",
    ClientTypeLidarr = "lidarr",
    ClientTypeUnknown = "unknown",
    ClientTypeClaude = "claude",
    ClientTypeOpenAI = "openai",
    ClientTypeOllama = "ollama",
    ClientTypeTMDB = "tmdb",
    ClientTypeTrakt = "trakt"
}
export enum TypesConfigurationAppEnvironment {
    development = "development",
    staging = "staging",
    production = "production"
}
export enum TypesConfigurationAppLogLevel {
    debug = "debug",
    info = "info",
    warn = "warn",
    error = "error"
}
export enum TypesListType {
    ListTypePlaylist = "playlist",
    ListTypeCollection = "collection"
}
export enum TypesMediaType {
    MediaTypeMovie = "movie",
    MediaTypeSeries = "series",
    MediaTypeSeason = "season",
    MediaTypeEpisode = "episode",
    MediaTypeArtist = "artist",
    MediaTypeAlbum = "album",
    MediaTypeTrack = "track",
    MediaTypePlaylist = "playlist",
    MediaTypeCollection = "collection",
    MediaTypeAll = "all",
    MediaTypeUnknown = "unknown"
}
export type operations = Record<string, never>;
