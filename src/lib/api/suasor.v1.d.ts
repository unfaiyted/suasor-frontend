/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Log in a user
         * @description Authenticates a user with email and password
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description User login data */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["models.LoginRequest"];
                };
            };
            responses: {
                /** @description Successfully authenticated user */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.APIResponse-models_AuthData"];
                    };
                };
                /** @description Invalid request format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Invalid credentials or inactive account */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Log out a user
         * @description Invalidates the refresh token, effectively logging the user out
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Logout data */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["models.LogoutRequest"];
                };
            };
            responses: {
                /** @description Successfully logged out */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.APIResponse-any"];
                    };
                };
                /** @description Invalid request format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Invalid refresh token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh access token
         * @description Get a new access token using a refresh token
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Refresh token data */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["models.RefreshTokenRequest"];
                };
            };
            responses: {
                /** @description Successfully refreshed token */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.APIResponse-models_AuthData"];
                    };
                };
                /** @description Invalid request format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Invalid or expired refresh token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register a new user
         * @description Registers a new user with email, username, and password
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description User registration data */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["models.RegisterRequest"];
                };
            };
            responses: {
                /** @description Successfully registered user */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.APIResponse-models_AuthData"];
                    };
                };
                /** @description Invalid request format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Email or username already in use */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Validate user session
         * @description Validates the user's session token and returns current user profile
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Valid session with user details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.APIResponse-models_UserResponse"];
                    };
                };
                /** @description Invalid or expired session token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current configuration
         * @description Returns the current system configuration
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Configuration retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.APIResponse-models_Configuration"];
                    };
                };
                /** @description Unauthorized access */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Forbidden - admin access required */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
            };
        };
        /**
         * Update application configuration
         * @description Updates the system-wide application configuration (admin only)
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["models.Configuration"];
            responses: {
                /** @description Configuration updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.APIResponse-any"];
                    };
                };
                /** @description Invalid request format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Unauthorized access */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Forbidden - admin access required */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/config/file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get file-based configuration
         * @description Returns the file-based system configuration (admin only)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description File configuration retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.APIResponse-models_Configuration"];
                    };
                };
                /** @description Unauthorized access */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Forbidden - admin access required */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
            };
        };
        /**
         * Save configuration to file
         * @description Saves the configuration to file only (admin only)
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["models.Configuration"];
            responses: {
                /** @description Configuration saved to file successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.APIResponse-any"];
                    };
                };
                /** @description Invalid request format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Unauthorized access */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Forbidden - admin access required */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/config/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset configuration to defaults
         * @description Resets the system configuration to default values (admin only)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Configuration reset successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.APIResponse-any"];
                    };
                };
                /** @description Unauthorized access */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Forbidden - admin access required */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/config/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user configuration
         * @description Returns the configuration for the current user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User configuration retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.APIResponse-models_UserConfig"];
                    };
                };
                /** @description Unauthorized access */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
            };
        };
        /**
         * Update user configuration
         * @description Updates the configuration for the current user
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description User configuration data */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["models.UserConfig"];
                };
            };
            responses: {
                /** @description User configuration updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.APIResponse-any"];
                    };
                };
                /** @description Invalid request format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Unauthorized access */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * checks app and database health
         * @description returns JSON object with health statuses.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.HealthResponse"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shorten": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a shortened URL
         * @description Creates a new shortened URL from a long URL, with optional custom code and expiration. If no custom code is provided, one will be generated.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description URL to shorten */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["models.ShortenRequest"];
                };
            };
            responses: {
                /** @description Successfully created shortened URL */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.APIResponse-models_ShortenData"];
                    };
                };
                /** @description Invalid request format or short code already exists */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shorten/lookup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Check if a URL is already shortened
         * @description Checks if an original URL already has a short code and optionally creates one if it doesn't exist
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Original URL to check */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["models.GetByOriginalURLRequest"];
                };
            };
            responses: {
                /** @description Successfully retrieved shortened URL information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.APIResponse-models_ShortenData"];
                    };
                };
                /** @description Successfully created new shortened URL */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.APIResponse-models_ShortenData"];
                    };
                };
                /** @description Invalid request format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Original URL not found and createIfNotExists is false */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shorten/{code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Redirect to original URL
         * @description Redirects to the original URL from a short code
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Short code identifier */
                    code: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Found - Redirects to the original URL */
                302: {
                    headers: {
                        /** @description The URL to redirect to */
                        Location?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request - missing code parameter */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "*/*": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Short URL not found or has expired */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "*/*": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
            };
        };
        /**
         * Update a shortened URL
         * @description Updates an existing shortened URL by its short code
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Short code identifier */
                    code: string;
                };
                cookie?: never;
            };
            /** @description Updated URL data */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["models.ShortenRequest"];
                };
            };
            responses: {
                /** @description Successfully updated shortened URL */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.APIResponse-models_ShortenData"];
                    };
                };
                /** @description Invalid request format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Short URL not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete a shortened URL
         * @description Deletes an existing shortened URL by its short code
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Short code identifier */
                    code: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content - URL successfully deleted */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad request - missing code parameter */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "*/*": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Short URL not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "*/*": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "*/*": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Change user password
         * @description Changes the password for the currently authenticated user
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Password change information */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["models.ChangePasswordRequest"];
                };
            };
            responses: {
                /** @description Successfully changed password */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.APIResponse-string"];
                    };
                };
                /** @description Invalid request format or incorrect current password */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Unauthorized - Not logged in */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the current user's profile
         * @description Retrieves the profile information for the currently authenticated user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved user profile */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.APIResponse-models_UserResponse"];
                    };
                };
                /** @description Unauthorized - Not logged in */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
            };
        };
        /**
         * Update user profile
         * @description Updates the profile information for the currently authenticated user
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Updated profile information */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["models.UpdateProfileRequest"];
                };
            };
            responses: {
                /** @description Successfully updated user profile */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.APIResponse-models_UserResponse"];
                    };
                };
                /** @description Invalid request format or email/username already exists */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Unauthorized - Not logged in */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register a new user
         * @description Creates a new user account with the provided information
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description User registration information */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["models.RegisterRequest"];
                };
            };
            responses: {
                /** @description Successfully registered user */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.APIResponse-models_UserResponse"];
                    };
                };
                /** @description Invalid request format or email/username already exists */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user by ID
         * @description Retrieves a user by their ID (admin only)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully retrieved user */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.APIResponse-models_UserResponse"];
                    };
                };
                /** @description Invalid user ID format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Unauthorized - Not logged in */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Forbidden - Not an admin */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete a user account
         * @description Deletes a user account (admin only)
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content - User successfully deleted */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid user ID format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "*/*": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Unauthorized - Not logged in */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "*/*": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Forbidden - Not an admin */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "*/*": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "*/*": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "*/*": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Activate a user account
         * @description Activates a user account (admin only)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully activated user account */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.APIResponse-models_UserResponse"];
                    };
                };
                /** @description Invalid user ID format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Unauthorized - Not logged in */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Forbidden - Not an admin */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/deactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deactivate a user account
         * @description Deactivates a user account (admin only)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User ID */
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successfully deactivated user account */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.APIResponse-models_UserResponse"];
                    };
                };
                /** @description Invalid user ID format */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Unauthorized - Not logged in */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Forbidden - Not an admin */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Change user role
         * @description Changes a user's role (admin only)
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User ID */
                    id: number;
                };
                cookie?: never;
            };
            /** @description New role information */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["models.ChangeRoleRequest"];
                };
            };
            responses: {
                /** @description Successfully changed user role */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.APIResponse-models_UserResponse"];
                    };
                };
                /** @description Invalid user ID format or invalid role */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Unauthorized - Not logged in */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Forbidden - Not an admin */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
                /** @description Server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.ErrorResponse-error"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        "models.APIResponse-any": {
            data?: unknown;
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "models.APIResponse-models_AuthData": {
            data?: components["schemas"]["models.AuthData"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "models.APIResponse-models_Configuration": {
            data?: components["schemas"]["models.Configuration"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "models.APIResponse-models_ShortenData": {
            data?: components["schemas"]["models.ShortenData"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "models.APIResponse-models_UserConfig": {
            data?: components["schemas"]["models.UserConfig"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "models.APIResponse-models_UserResponse": {
            data?: components["schemas"]["models.UserResponse"];
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        "models.APIResponse-string": {
            data?: string;
            /** @example Operation successful */
            message?: string;
            /** @example true */
            success?: boolean;
        };
        /** @description Authentication data returned to client after successful authentication */
        "models.AuthData": {
            /** @description AccessToken is the JWT token for API access
             *     @Description JWT access token for authenticated requests
             *     @Example "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." */
            accessToken?: string;
            /** @description ExpiresAt indicates when the access token expires
             *     @Description UNIX timestamp when the access token expires
             *     @Example 1674140400 */
            expiresAt?: number;
            /** @description RefreshToken is used to get new access tokens
             *     @Description JWT refresh token for obtaining new access tokens
             *     @Example "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." */
            refreshToken?: string;
            /** @description User contains the user profile information
             *     @Description User profile data */
            user?: components["schemas"]["models.UserResponse"];
        };
        /** @description Request payload for changing user password */
        "models.ChangePasswordRequest": {
            /**
             * @description CurrentPassword is the user's existing password for verification
             *     @Description User's current password for verification
             *     @Example "oldpassword123"
             * @example oldpassword123
             */
            currentPassword: string;
            /**
             * @description NewPassword is the password to change to
             *     @Description New password to set for the user
             *     @Example "newpassword456"
             * @example newpassword456
             */
            newPassword: string;
        };
        /** @description Request payload for changing user role */
        "models.ChangeRoleRequest": {
            /**
             * @description Role is the new role to assign to the user
             *     @Description New role to assign to the user
             *     @Enum "user" "admin"
             *     @Example "admin"
             * @example admin
             * @enum {string}
             */
            role: ModelsChangeRoleRequestRole;
        };
        /** @description Complete application configuration settings */
        "models.Configuration": {
            /** @description App contains core application settings */
            app?: {
                /** @example http://localhost:8080 */
                apiBaseURL: string;
                /** @example http://localhost:3000 */
                appURL: string;
                /**
                 * @example development
                 * @enum {string}
                 */
                environment: ModelsConfigurationAppEnvironment;
                /**
                 * @example info
                 * @enum {string}
                 */
                logLevel: ModelsConfigurationAppLogLevel;
                /** @example 100 */
                maxPageSize: number;
                /** @example suasor */
                name: string;
            };
            /** @description Auth contains authentication settings */
            auth?: {
                /**
                 * @description New fields to add
                 * @example 15
                 */
                accessExpiryMinutes: number;
                /** @example [
                 *       "http://localhost:3000"
                 *     ] */
                allowedOrigins?: string[];
                /** @example false */
                enable2FA?: boolean;
                /** @example true */
                enableLocal?: boolean;
                /** @example your-secret-key */
                jwtSecret: string;
                /** @example 7 */
                refreshExpiryDays: number;
                /** @example 60 */
                sessionTimeout: number;
                /** @example suasor-client */
                tokenAudience: string;
                /** @example 24 */
                tokenExpiration: number;
                /** @example suasor-api */
                tokenIssuer: string;
            };
            /** @description Database contains database connection settings */
            db?: {
                /** @example localhost */
                host: string;
                /** @example 20 */
                maxConns: number;
                /** @example suasor */
                name: string;
                /** @example yourpassword */
                password: string;
                /** @example 5432 */
                port: string;
                /** @example 30 */
                timeout: number;
                /** @example postgres_user */
                user: string;
            };
            /** @description HTTP contains HTTP server configuration */
            http?: {
                /** @example false */
                enableSSL?: boolean;
                /** @example 60 */
                idleTimeout: number;
                /** @example 8080 */
                port: string;
                /** @example false */
                proxyEnabled?: boolean;
                /** @example http://proxy:8080 */
                proxyURL?: string;
                /** @example true */
                rateLimitEnabled?: boolean;
                /** @example 30 */
                readTimeout: number;
                /** @example 100 */
                requestsPerMin?: number;
                /** @example /path/to/cert.pem */
                sslCert?: string;
                /** @example /path/to/key.pem */
                sslKey?: string;
                /** @example 30 */
                writeTimeout: number;
            };
            /** @description Integrations contains all third-party service configurations */
            integrations?: {
                emby?: components["schemas"]["models.EmbyConfig"];
                jellyfin?: components["schemas"]["models.JellyfinConfig"];
                navidrome?: components["schemas"]["models.NavidromeConfig"];
                plex?: components["schemas"]["models.PlexConfig"];
                spotify?: components["schemas"]["models.SpotifyConfig"];
                trakt?: components["schemas"]["models.TraktConfig"];
            };
        };
        /** @description Emby media server configuration */
        "models.EmbyConfig": {
            /** @example your-api-key */
            apiKey?: string;
            /** @example false */
            enabled?: boolean;
            /** @example localhost */
            host?: string;
            /** @example 8096 */
            port?: number;
            /** @example false */
            ssl?: boolean;
            /** @example admin */
            username?: string;
        };
        "models.ErrorResponse-error": {
            details?: unknown;
            /** @example This is a pretty message */
            message?: string;
            request_id?: string;
            /** @example 201 */
            statusCode?: number;
            timestamp?: string;
            /** @example FAILED_CHECK */
            type?: components["schemas"]["models.ErrorType"];
        };
        /** @enum {string} */
        "models.ErrorType": ModelsErrorType;
        "models.GetByOriginalURLRequest": {
            createIfNotExists?: boolean;
            customCode?: string;
            expiresAfter?: number;
            originalUrl: string;
        };
        "models.HealthResponse": {
            /** @example true */
            application: boolean;
            /** @example true */
            database: boolean;
            /**
             * @description Overall status of the system
             * @example up
             * @enum {string}
             */
            status: ModelsHealthResponseStatus;
        };
        /** @description Jellyfin media server configuration */
        "models.JellyfinConfig": {
            /** @example your-api-key */
            apiKey?: string;
            /** @example false */
            enabled?: boolean;
            /** @example localhost */
            host?: string;
            /** @example 8096 */
            port?: number;
            /** @example false */
            ssl?: boolean;
            /** @example admin */
            username?: string;
        };
        /** @description Request payload for user login */
        "models.LoginRequest": {
            /**
             * @description Email is the user's email address
             *     @Description User's email address
             *     @Example "user@example.com"
             * @example user@example.com
             */
            email: string;
            /** @description Password is the user's chosen password
             *     @Description User's password (plain text in request) */
            password: string;
        };
        /** @description Request payload for user logout */
        "models.LogoutRequest": {
            /** @description RefreshToken identifies the session to terminate
             *     @Description JWT refresh token to invalidate */
            refreshToken: string;
        };
        /** @description Supersonic music server configuration */
        "models.NavidromeConfig": {
            /** @example false */
            enabled?: boolean;
            /** @example localhost */
            host?: string;
            /** @example your-password */
            password?: string;
            /** @example 4533 */
            port?: number;
            /** @example false */
            ssl?: boolean;
            /** @example admin */
            username?: string;
        };
        /** @description Plex media server configuration */
        "models.PlexConfig": {
            /** @example false */
            enabled?: boolean;
            /** @example localhost */
            host?: string;
            /** @example 32400 */
            port?: number;
            /** @example false */
            ssl?: boolean;
            /** @example your-plex-token */
            token?: string;
        };
        /** @description Request payload for refreshing access tokens */
        "models.RefreshTokenRequest": {
            /** @description RefreshToken is used to generate a new access token
             *     @Description JWT refresh token to use for generating new access token */
            refreshToken: string;
        };
        /** @description Request payload for user registration */
        "models.RegisterRequest": {
            /**
             * @description Email is the user's email address
             *     @Description User's email address
             *     @Example "user@example.com"
             * @example user@example.com
             */
            email: string;
            /** @description Password is the user's chosen password
             *     @Description User's password (plain text in request) */
            password: string;
            /**
             * @description Username is the user's desired username
             *     @Description User's chosen username
             *     @Example "johndoe"
             * @example johndoe
             */
            username: string;
        };
        "models.Shorten": {
            /** @example 0 */
            clickCount?: number;
            createdAt?: string;
            expiresAt?: string;
            /** @example 1 */
            id?: number;
            /** @example https://example.com/some/long/path */
            originalUrl: string;
            /** @example abc123 */
            shortCode?: string;
            updatedAt?: string;
        };
        "models.ShortenData": {
            shortUrl?: string;
            shorten?: components["schemas"]["models.Shorten"];
        };
        "models.ShortenRequest": {
            customCode?: string;
            /** @description In days */
            expiresAfter?: number;
            originalUrl: string;
        };
        /** @description Spotify configuration */
        "models.SpotifyConfig": {
            /** @example your-client-id */
            clientId?: string;
            /** @example your-client-secret */
            clientSecret?: string;
            /** @example false */
            enabled?: boolean;
            /** @example http://localhost:8080/callback */
            redirectUri?: string;
            /** @example user-library-read playlist-read-private */
            scopes?: string;
        };
        /** @description Trakt.tv configuration */
        "models.TraktConfig": {
            /** @example your-client-id */
            clientId?: string;
            /** @example your-client-secret */
            clientSecret?: string;
            /** @example false */
            enabled?: boolean;
            /** @example http://localhost:8080/callback */
            redirectUri?: string;
        };
        /** @description Request payload for updating user profile */
        "models.UpdateProfileRequest": {
            /**
             * @description Email is the new email address
             *     @Description Updated email address for the user
             *     @Example "newemail@example.com"
             * @example newemail@example.com
             */
            email?: string;
            /**
             * @description Username is the new username
             *     @Description Updated username for the user
             *     @Example "newusername"
             * @example newusername
             */
            username?: string;
        };
        /** @description User-specific configuration stored in the database */
        "models.UserConfig": {
            /** @example true */
            autoSyncRecommendations?: boolean;
            /** @example en,es,fr */
            contentLanguages?: string;
            /** @example true */
            createServerPlaylists?: boolean;
            createdAt?: string;
            /** @example AI Picks */
            defaultCollection?: string;
            /**
             * @description Sync Preferences
             * @example plex
             * @enum {string}
             */
            defaultMediaServer?: ModelsUserConfigDefaultMediaServer;
            deletedAt?: string;
            /**
             * @example weekly
             * @enum {string}
             */
            digestFrequency?: ModelsUserConfigDigestFrequency;
            /** @example true */
            emailNotifications?: boolean;
            /** @example true */
            enableAnimations?: boolean;
            /** @example false */
            enableExperimentalAI?: boolean;
            /** @example horror,war */
            excludedGenres?: string;
            id?: number;
            /** @example false */
            includeUnratedContent?: boolean;
            /** @example 20 */
            itemsPerPage?: number;
            /** @example en-US */
            language: string;
            /** @example R */
            maxContentRating?: string;
            /** @example 20 */
            maxRecommendations?: number;
            /** @example PG-13 */
            minContentRating?: string;
            /** @example 0.7 */
            newContentWeight?: number;
            /**
             * @description Notification Settings
             * @example true
             */
            notificationsEnabled?: boolean;
            /** @example true */
            notifyOnNewRecommendations?: boolean;
            /** @example false */
            notifyOnSync?: boolean;
            /** @example 0.8 */
            personalHistoryWeight?: number;
            /** @example 0.3 */
            popularityWeight?: number;
            /** @example action,comedy,drama */
            preferredGenres?: string;
            /**
             * @description Recommendation Preferences
             * @example daily
             * @enum {string}
             */
            recommendationFrequency?: ModelsUserConfigRecommendationFrequency;
            /**
             * @description AI Algorithm Settings
             * @example diverse
             * @enum {string}
             */
            recommendationStrategy?: ModelsUserConfigRecommendationStrategy;
            /**
             * @example daily
             * @enum {string}
             */
            syncFrequency?: ModelsUserConfigSyncFrequency;
            /**
             * @description UI Preferences
             * @example dark
             * @enum {string}
             */
            theme?: ModelsUserConfigTheme;
            updatedAt?: string;
            /** @description UserID links this config to a specific user */
            userId?: number;
        };
        /** @description User information returned in API responses */
        "models.UserResponse": {
            /** @description Email is the unique email address of the user
             *     @Description User's email address
             *     @Example "user@example.com" */
            email?: string;
            /** @description ID is the unique identifier for the user
             *     @Description User's unique identifier
             *     @Example 1 */
            id?: number;
            /** @description Role defines the user's permission level
             *     @Description User's role in the system
             *     @Enum "user" "admin"
             *     @Example "user" */
            role?: string;
            /** @description Username is the display name chosen by the user
             *     @Description User's chosen username
             *     @Example "johndoe" */
            username?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: {
        /** @description Configuration data */
        "models.Configuration": {
            content: {
                "application/json": components["schemas"]["models.Configuration"];
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export enum ModelsChangeRoleRequestRole {
    user = "user",
    admin = "admin"
}
export enum ModelsConfigurationAppEnvironment {
    development = "development",
    staging = "staging",
    production = "production"
}
export enum ModelsConfigurationAppLogLevel {
    debug = "debug",
    info = "info",
    warn = "warn",
    error = "error"
}
export enum ModelsErrorType {
    ErrorTypeFailedCheck = "FAILED_CHECK",
    ErrorTypeUnauthorized = "UNAUTHORIZED",
    ErrorTypeNotFound = "NOT_FOUND",
    ErrorTypeBadRequest = "BAD_REQUEST",
    ErrorTypeInternalError = "INTERNAL_ERROR",
    ErrorTypeForbidden = "FORBIDDEN",
    ErrorTypeConflict = "CONFLICT",
    ErrorTypeValidation = "VALIDATION_ERROR",
    ErrorTypeRateLimited = "RATE_LIMITED",
    ErrorTypeTimeout = "TIMEOUT",
    ErrorTypeServiceUnavailable = "SERVICE_UNAVAILABLE",
    ErrorTypeUnprocessableEntity = "UNPROCESSABLE_ENTITY"
}
export enum ModelsHealthResponseStatus {
    up = "up",
    down = "down",
    degraded = "degraded"
}
export enum ModelsUserConfigDefaultMediaServer {
    emby = "emby",
    jellyfin = "jellyfin",
    plex = "plex"
}
export enum ModelsUserConfigDigestFrequency {
    never = "never",
    daily = "daily",
    weekly = "weekly"
}
export enum ModelsUserConfigRecommendationFrequency {
    daily = "daily",
    weekly = "weekly",
    monthly = "monthly"
}
export enum ModelsUserConfigRecommendationStrategy {
    similar = "similar",
    diverse = "diverse",
    balanced = "balanced"
}
export enum ModelsUserConfigSyncFrequency {
    manual = "manual",
    daily = "daily",
    weekly = "weekly"
}
export enum ModelsUserConfigTheme {
    light = "light",
    dark = "dark",
    system = "system"
}
export type operations = Record<string, never>;
